{"abi":[{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastSmartMeterReadWh","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getIsBundled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastMeterReadingAndHash","outputs":[{"name":"_lastSmartMeterReadWh","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_bundled","type":"bool"}],"name":"setIsBundled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_owner","type":"address"}],"name":"setAssetOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadWh","type":"uint256"}],"name":"setLastSmartMeterReadWh","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_matcher","type":"address"}],"name":"addMatcher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_matcher","type":"address[]"}],"name":"setMatcherExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_removal","type":"address"}],"name":"removeMatcherExternal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_matcher","type":"address[]"}],"name":"setMatcher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"name":"setLastSmartMeterReadFileHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_marketLookupContract","type":"address"}],"name":"setMarketLookupContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadWh","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"name":"setSmartMeterRead","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_removal","type":"address"}],"name":"removeMatcher","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetGeneral","outputs":[{"components":[{"name":"smartMeter","type":"address"},{"name":"owner","type":"address"},{"name":"lastSmartMeterReadWh","type":"uint256"},{"name":"active","type":"bool"},{"name":"lastSmartMeterReadFileHash","type":"string"},{"name":"matcher","type":"address[]"},{"name":"propertiesDocumentHash","type":"string"},{"name":"url","type":"string"},{"name":"marketLookupContract","type":"address"},{"name":"bundled","type":"bool"}],"name":"general","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAssetListLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMarketLookupContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_active","type":"bool"}],"name":"setActive","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getSmartMeter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastSmartMeterReadFileHash","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMatcher","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_assetLogic","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_newOwner","type":"address"}],"name":"LogChangeOwner","type":"event"}],"bytecode":"","contractName":"AssetGeneralDB","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\nimport \"ew-utils-general-contracts/contracts/Msc/Owned.sol\";\nimport \"../../contracts/Interfaces/AssetDbInterface.sol\";\nimport \"../../contracts/Asset/AssetGeneralStructContract.sol\";\n\n/// @title an (abstract) contract for handling all the AssetGeneral-Struct specific tasks in the database contract\n/// @notice this funciton provides getter and setter functions for the AssetGeneral-struct.\n/// @dev in order to use this contract, inherhit it and implement the abstract functions (e.g. AssetConsumingDB and AssetProducingDB)\ncontract AssetGeneralDB is Owned, AssetGeneralStructContract, AssetDbInterface {\n\n    /// @notice constructor\n    /// @param _assetLogic the AssetLogic-contract-address owning this contract\n    constructor(address _assetLogic) Owned(_assetLogic) public { }\n\n    /**\n        abstract funcitons to be implemented\n     */\n\n    /// @notice gets the AssetGeneral-struct as storage-pointer\n    /// @dev function has to be implemented in order to create a deployable bytecode\n    /// @param _assetId the assetId of the AssetGeneral-struct to be returned\n    /// @return returns a storage pointer to a AssetGeneral struct\n    function getAssetGeneralInternal(uint _assetId) internal view returns (AssetGeneral storage general);\n\n    /// @notice gets the amount of onboarded assets\n    /// @dev this function has to be implemetned in order to create a deployable bytecode\n    /// @return retuns the amount of onboarded assets\n    function getAssetListLength() external view returns (uint);\n\n    /**\n        external functions\n    */\n\n    /// @notice adds a new matcher to an asset\n    /// @param _assetId the id of an asset\n    /// @param _matcher the address of the matcher to be added\n    function addMatcher(uint _assetId, address _matcher) external onlyOwner {\n        getAssetGeneralInternal(_assetId).matcher.push(_matcher);\n    }\n\n    /// @notice set the flag whether an asset is active\n    /// @param _assetId the id of an asset\n    /// @param _active the flag whether the asset is active\n    function setActive(uint _assetId, bool _active) external onlyOwner {\n        getAssetGeneralInternal(_assetId).active = _active;\n    }\n\n    /// @notice set the Asset-owner\n    /// @param _assetId the id of an asset\n    /// @param _owner the new owner address\n    function setAssetOwner(uint _assetId, address _owner) external onlyOwner {\n        getAssetGeneralInternal(_assetId).owner = _owner;\n    }\n\n\n    /// @notice set the flag whether an asset is bundled to energy\n    /// @param _assetId the id of an asset\n    /// @param _bundled the bundle flag\n    function setIsBundled(uint _assetId, bool _bundled) external onlyOwner {\n        getAssetGeneralInternal(_assetId).bundled = _bundled;\n    }\n\n    /// @notice set the Last SmartMeterRead File-Hash\n    /// @param _assetId the id of an asset\n    /// @param _lastSmartMeterReadFileHash the hash of the last meterreading\n    function setLastSmartMeterReadFileHash(uint _assetId, string calldata _lastSmartMeterReadFileHash) external onlyOwner {\n        getAssetGeneralInternal(_assetId).lastSmartMeterReadFileHash = _lastSmartMeterReadFileHash;\n    }\n\n    /// @notice set the new meterreading\n    /// @param _assetId the id of an asset\n    /// @param _lastSmartMeterReadWh the new meterreadind\n    function setLastSmartMeterReadWh(uint _assetId, uint _lastSmartMeterReadWh) external onlyOwner {\n        getAssetGeneralInternal(_assetId).lastSmartMeterReadWh = _lastSmartMeterReadWh;\n    }\n\n    /// @notice set the markup-lookup-contract\n    /// @param _assetId the id of an asset\n    /// @param _marketLookupContract the new market-lookup-contract\n    function setMarketLookupContract(uint _assetId, address _marketLookupContract) external onlyOwner {\n        getAssetGeneralInternal(_assetId).marketLookupContract = _marketLookupContract;\n    }\n\n    /// @notice set the meterreading and the filehash at the same time\n    /// @dev can be used to save gas-costs when setting a meterreading in the logic contract\n    /// @param _assetId the id of an asset\n    /// @param _lastSmartMeterReadWh the meterreading\n    /// @param _lastSmartMeterReadFileHash the filehash\n    function setSmartMeterRead(\n        uint _assetId,\n        uint _lastSmartMeterReadWh,\n        string calldata _lastSmartMeterReadFileHash\n    )\n        external\n        onlyOwner\n    {\n        AssetGeneral storage general = getAssetGeneralInternal(_assetId);\n        general.lastSmartMeterReadWh = _lastSmartMeterReadWh;\n        general.lastSmartMeterReadFileHash = _lastSmartMeterReadFileHash;\n    }\n\n    /// @notice gets the active flag\n    /// @param _assetId the id of an asset\n    /// @return flag whether an active is marked as active\n    function getActive(uint _assetId) external onlyOwner view returns (bool) {\n        return getAssetGeneralInternal(_assetId).active;\n    }\n\n    /// @notice gets the AssetGeneral-struct as memory\n    /// @param _assetId the id of an asset\n    /// @return the AssetGeneral-struct as memory\n    function getAssetGeneral(uint _assetId) external onlyOwner view returns (AssetGeneral memory general){\n        return getAssetGeneralInternal(_assetId);\n    }\n\n    /// @notice gets the bundled-flag of an asset\n    /// @param _assetId the id of an asset\n    /// @return bundle-flag of an asset\n    function getIsBundled(uint _assetId) external onlyOwner view returns (bool) {\n        return getAssetGeneralInternal(_assetId).bundled;\n    }\n\n    /// @notice gets the last filehash of a meterreading\n    /// @param _assetId the id of an asset\n    /// @return filehash of the last meterreading\n    function getLastSmartMeterReadFileHash(uint _assetId) external onlyOwner view returns (string memory) {\n        return getAssetGeneralInternal(_assetId).lastSmartMeterReadFileHash;\n    }\n\n    /// @notice gets the current meterreading\n    /// @param _assetId the id of an asset\n    /// @return the current meterreading\n    function getLastSmartMeterReadWh(uint _assetId) external onlyOwner view returns (uint) {\n        return getAssetGeneralInternal(_assetId).lastSmartMeterReadWh;\n    }\n\n    /// @notice gets the asset-owner\n    /// @param _assetId the id of an asset\n    /// @return the eth-address of the owner of the asset\n    function getAssetOwner(uint _assetId) external onlyOwner view returns (address){\n        return getAssetGeneralInternal(_assetId).owner;\n    }\n\n    /// @notice gets the last meterreading and its filehash\n    /// @dev this function can be used to save gas-costs when calling it\n    /// @param _assetId the id of an asset\n    /// @return last meterreading and its filehash\n    function getLastMeterReadingAndHash(uint _assetId) external onlyOwner view returns (uint _lastSmartMeterReadWh, string memory _lastSmartMeterReadFileHash) {\n        AssetGeneral memory general = getAssetGeneralInternal(_assetId);\n        _lastSmartMeterReadWh = general.lastSmartMeterReadWh;\n        _lastSmartMeterReadFileHash = general.lastSmartMeterReadFileHash;\n    }\n\n    /// @notice gets the market-lookup-contract\n    /// @param _assetId the id of an asset\n    /// @return the market-lookup-contractaddress\n    function getMarketLookupContract(uint _assetId) external onlyOwner view returns (address){\n        return getAssetGeneralInternal(_assetId).marketLookupContract;\n    }\n\n    /// @notice gets the matcher-array\n    /// @param _assetId the id of an asset\n    /// @return array with matcher-addresses\n    function getMatcher(uint _assetId) external onlyOwner view returns (address[] memory) {\n        return getAssetGeneralInternal(_assetId).matcher;\n    }\n\n    /// @notice gets the smartmeter of an asset\n    /// @param _assetId the id of an asset\n    /// @return eth-address of the smartmeter\n    function getSmartMeter(uint _assetId) external onlyOwner view returns (address){\n        return getAssetGeneralInternal(_assetId).smartMeter;\n    }\n\n    /**\n        public functions\n    */\n\n    /// @notice Set the matcher-array\n    /// @param _assetId the id of an asset\n    /// @param _matcher array with matcher-addresses\n    function setMatcher(uint _assetId, address[] memory _matcher) public onlyOwner {\n        getAssetGeneralInternal(_assetId).matcher = _matcher;\n    }\n\n    function setMatcherExternal(uint _assetId, address[] calldata _matcher) external onlyOwner {\n        setMatcher(_assetId, _matcher);\n    }\n\n    function removeMatcherExternal(uint _assetId, address _removal) external onlyOwner returns (bool) {\n        return removeMatcher(_assetId, _removal);\n    }\n\n    /// @notice removes an matcher-address from the matcher-array of an asset\n    /// @param _assetId the id of an asset\n    /// @param _removal the address to be removed\n    /// @return flag whether the to be removed address was found in the array\n    function removeMatcher(uint _assetId, address _removal) public onlyOwner returns (bool) {\n\n        address[] storage matchers = getAssetGeneralInternal(_assetId).matcher;\n        for (uint i = 0; i < matchers.length; i++)\n        {\n            if(matchers[i] == _removal)\n            {\n                matchers[i] = matchers[matchers.length-1];\n                matchers.length--;\n                return true;\n            }\n        }\n    }\n\n\n\n\n}\n","networks":"{}"}