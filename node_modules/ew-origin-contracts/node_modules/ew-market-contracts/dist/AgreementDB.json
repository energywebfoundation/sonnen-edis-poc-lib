{"abi":[{"constant":true,"inputs":[],"name":"getAllAgreementListLengthDB","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_agreementId","type":"uint256"}],"name":"getAgreementDB","outputs":[{"components":[{"name":"demandId","type":"uint256"},{"name":"supplyId","type":"uint256[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_demandId","type":"uint256"},{"name":"_supplyId","type":"uint256[]"}],"name":"createAgreementDB","outputs":[{"name":"_agreementId","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_supplyId","type":"uint256"}],"name":"getAgreementForSupply","outputs":[{"components":[{"name":"agreementId","type":"uint256"},{"name":"isSet","type":"bool"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_newOwner","type":"address"}],"name":"LogChangeOwner","type":"event"}],"bytecode":"","contractName":"AgreementDB","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\nimport \"ew-utils-general-contracts/contracts/Msc/Owned.sol\";\n\ncontract AgreementDB is Owned {\n\n    struct SupplyAgreement {\n        uint agreementId;\n        bool isSet;\n    }\n\n    struct Agreement {\n        uint demandId;\n        uint[] supplyId;\n    }\n\n    /// @notice list with all created agreements\n    Agreement[] private allAgreements;\n\n    mapping(uint => SupplyAgreement) private supplyToAgreement;\n\n\n    /*\n\t/// @notice approves an demand for an agreement\n\t/// @param _agreementId the agreement Id\n\t/// @return true when both supply and demand agreed\n    function approveAgreementDemandDB(uint _agreementId)\n        onlyOwner\n        external\n        returns (bool)\n    {\n        Agreement storage a = allAgreements[_agreementId];\n        a.approvedByDemandOwner = true;\n        return (a.approvedByDemandOwner && a.approvedBySupplyOwner);\n    }\n\n\t/// @notice approves an supply for an agreement\n\t/// @param _agreementId the agreement Id\n\t/// @return true when both supply and demand agreed\n    function approveAgreementSupplyDB(uint _agreementId)\n        onlyOwner\n        external\n        returns (bool)\n    {\n        Agreement storage a = allAgreements[_agreementId];\n        a.approvedBySupplyOwner = true;\n        return (a.approvedByDemandOwner && a.approvedBySupplyOwner);\n    }\n    */\n    function createAgreementDB\n    (\n     \n        uint _demandId,\n        uint[] memory _supplyId\n   )\n        public\n        onlyOwner\n        returns (uint _agreementId)\n    {\n        allAgreements.push(Agreement({\n            demandId: _demandId,\n            supplyId: _supplyId\n        }));\n        _agreementId = allAgreements.length>0?allAgreements.length-1:0;\n\n        for(uint i=0; i<_supplyId.length;i++){\n            supplyToAgreement[_supplyId[i]] = SupplyAgreement({\n                agreementId: _agreementId,\n                isSet: true\n            });\n        }\n\n    }\n\n/*\n    /// @notice set the matchers for an agreement\n    /// @param _agreementId id of an agreement\n    /// @param _matchers matcher-array \n    function setAgreementMatcher(\n        uint _agreementId,\n        address[] calldata _matchers\n    )\n        external \n        onlyOwner\n    {\n        Agreement storage a = allAgreements[_agreementId];\n        a.allowedMatcher = _matchers;\n    }\n\n    /// @notice sets the matcherProperties for an agreement\n    /// @param _agreementId id of an agreement\n    /// @param _matcherPropertiesDocumentHash document-hash of the matcher properties\n    /// @param _matcherDBURL db-url of the document-hash\n    function setMatcherPropertiesAndURL(\n        uint _agreementId,\n        string calldata _matcherPropertiesDocumentHash,\n        string calldata _matcherDBURL\n    )\n        external \n        onlyOwner\n    {\n        Agreement storage a = allAgreements[_agreementId];\n        a.matcherPropertiesDocumentHash = _matcherPropertiesDocumentHash;\n        a.matcherDBURL = _matcherDBURL;\n    }\n*/\n\t/// @notice Returns a agreement-struct\n\t/// @param _agreementId id of a agreement\n\t/// @return returns a agreement-struct\n    function getAgreementDB(uint _agreementId)\n        external\n        view\n        onlyOwner\n        returns (Agreement memory)\n    {\n        return allAgreements[_agreementId];\n    }\n\n\t/// @notice funtion to retrieve the length of the allagreements-array\n\t/// @return the length of the allagreements-array\n    function getAllAgreementListLengthDB()\n        external\n        view\n        onlyOwner\n        returns (uint)\n    {\n        return allAgreements.length;\n    }\n\n    function getAgreementForSupply(uint _supplyId) \n        external \n        view\n        onlyOwner\n        returns (SupplyAgreement memory)\n    {\n        SupplyAgreement memory sa = supplyToAgreement[_supplyId];\n      //  require(sa.isSet,\"no agreement found\");\n        return sa;\n    } \n}\n","networks":"{}"}