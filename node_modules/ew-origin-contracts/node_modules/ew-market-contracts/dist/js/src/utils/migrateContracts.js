"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const MarketContractLookup_1 = require("../wrappedContracts/MarketContractLookup");
const ew_utils_deployment_1 = require("ew-utils-deployment");
const __1 = require("..");
function migrateMarketRegistryContracts(web3, assetContractLookupAddress, deployKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const privateKeyDeployment = deployKey.startsWith('0x') ?
                deployKey : '0x' + deployKey;
            const marketContractLookupAddress = (yield ew_utils_deployment_1.deploy(web3, __1.MarketContractLookupJSON.bytecode, { privateKey: privateKeyDeployment })).contractAddress;
            const marketLogicAddress = (yield ew_utils_deployment_1.deploy(web3, __1.MarketLogicJSON.bytecode +
                web3.eth.abi.encodeParameters(['address', 'address'], [assetContractLookupAddress, marketContractLookupAddress]).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const marketDBAddress = (yield ew_utils_deployment_1.deploy(web3, __1.MarketDBJSON.bytecode +
                web3.eth.abi.encodeParameter('address', marketLogicAddress).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const marketContractLookup = new MarketContractLookup_1.MarketContractLookup(web3, marketContractLookupAddress);
            yield marketContractLookup.init(assetContractLookupAddress, marketLogicAddress, marketDBAddress, { privateKey: privateKeyDeployment });
            const resultMapping = {};
            resultMapping.MarketContractLookup = marketContractLookupAddress;
            resultMapping.MarketLogic = marketLogicAddress;
            resultMapping.MarketDB = marketDBAddress;
            resolve(resultMapping);
            /*
            const marketContractLookupWeb3 = await sloffle.deploy(
                path.resolve(__dirname, '../../contracts/MarketContractLookup.json'),
                [],
                { privateKey: privateKeyDeployment },
            );
    
            const marketLogicWeb3 = await sloffle.deploy(
                path.resolve(__dirname, '../../contracts/MarketLogic.json'),
                [assetContractLookupAddress, marketContractLookupWeb3._address],
                { privateKey: privateKeyDeployment },
            );
    
            const marketDBWeb3 = await sloffle.deploy(
                path.resolve(__dirname, '../../contracts/MarketDB.json'),
                [marketLogicWeb3._address],
                { privateKey: privateKeyDeployment },
            );
    
            const marketContractLookup: MarketContractLookup
                = new MarketContractLookup((web3 as any), marketContractLookupWeb3._address);
    
            await marketContractLookup.init(
                assetContractLookupAddress,
                marketLogicWeb3._address,
                marketDBWeb3._address,
                { privateKey: privateKeyDeployment });
    
            resolve(sloffle.deployedContracts);
            */
        }));
    });
}
exports.migrateMarketRegistryContracts = migrateMarketRegistryContracts;
//# sourceMappingURL=migrateContracts.js.map