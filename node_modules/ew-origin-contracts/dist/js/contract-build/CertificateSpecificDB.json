{ "abi": [{ "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_newDataLog", "type": "string" }], "name": "setDataLog", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getOwnerChangeCounter", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getRetired", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_newOwnerChangeCounter", "type": "uint256" }], "name": "setOwnerChangeCounter", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_childId", "type": "uint256" }], "name": "addChildrenExternal", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getCertificateSpecific", "outputs": [{ "components": [{ "name": "retired", "type": "bool" }, { "name": "dataLog", "type": "string" }, { "name": "creationTime", "type": "uint256" }, { "name": "parentId", "type": "uint256" }, { "name": "children", "type": "uint256[]" }, { "name": "maxOwnerChanges", "type": "uint256" }, { "name": "ownerChangeCounter", "type": "uint256" }], "name": "_certificate", "type": "tuple" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_retired", "type": "bool" }], "name": "setRetired", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_newMaxOwnerChanges", "type": "uint256" }], "name": "setMaxOwnerChanges", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newOwner", "type": "address" }], "name": "changeOwner", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getMaxOwnerChanges", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "name": "_childId", "type": "uint256" }], "name": "addChildren", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }, { "components": [{ "name": "retired", "type": "bool" }, { "name": "dataLog", "type": "string" }, { "name": "creationTime", "type": "uint256" }, { "name": "parentId", "type": "uint256" }, { "name": "children", "type": "uint256[]" }, { "name": "maxOwnerChanges", "type": "uint256" }, { "name": "ownerChangeCounter", "type": "uint256" }], "name": "_certificate", "type": "tuple" }], "name": "setCertificateSpecific", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getCertificateChildrenLength", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_certificateId", "type": "uint256" }], "name": "getDataLog", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "_newOwner", "type": "address" }], "name": "LogChangeOwner", "type": "event" }], "bytecode": "", "contractName": "CertificateSpecificDB", "deployedBytecode": "", "source": "// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\nimport \"../../contracts/Interfaces/CertificateSpecificDBInterface.sol\";\nimport \"../../contracts/Origin/CertificateSpecificContract.sol\";\n\nimport \"ew-utils-general-contracts/contracts/Msc/Owned.sol\";\n\ncontract CertificateSpecificDB is CertificateSpecificDBInterface, Owned {\n\n    /**\n        abstract function declarations\n     */\n    function getCertificateSpecific(uint _certificateId) external view returns (CertificateSpecificContract.CertificateSpecific memory _certificate);\n    function getCertificateInternally(uint _certificateId) internal view returns (CertificateSpecificContract.CertificateSpecific  storage _certificate);\n    function setCertificateSpecific(uint _certificateId, CertificateSpecificContract.CertificateSpecific memory _certificate) public;\n\n    /**\n        external functions\n     */\n\n    /// @notice sets the datalog (lastSmartMeterReadFileHash) of a certificate\n    /// @param _certificateId the id of a certificate\n    /// @param _newDataLog the new datalog\n    function setDataLog(\n        uint _certificateId,\n        string calldata _newDataLog\n    )\n        external\n        onlyOwner\n    {\n        CertificateSpecificContract.CertificateSpecific storage certificate = getCertificateInternally(_certificateId);\n        certificate.dataLog = _newDataLog;\n    }\n\n    /// @notice sets the max owner changes for a certificate\n    /// @param _certificateId the id of the certificate\n    /// @param _newMaxOwnerChanges the new amount of max owner changes\n    function setMaxOwnerChanges(uint _certificateId, uint _newMaxOwnerChanges) external onlyOwner {\n        CertificateSpecificContract.CertificateSpecific storage certificate = getCertificateInternally(_certificateId);\n        certificate.maxOwnerChanges = _newMaxOwnerChanges;\n    }\n\n    /// @notice sets the owner change counter\n    /// @param _certificateId the id of the certificate\n    /// @param _newOwnerChangeCounter the new counter\n    function setOwnerChangeCounter(uint _certificateId, uint _newOwnerChangeCounter) external {\n        require(msg.sender == owner || msg.sender == address(this));\n        CertificateSpecificContract.CertificateSpecific storage certificate = getCertificateInternally(_certificateId);\n        certificate.ownerChangeCounter = _newOwnerChangeCounter;\n    }\n\n    /// @notice sets the retired flag for a certificate\n    /// @param _certificateId the id of the certificate\n    /// @param _retired flag whether the certificate is retired\n    function setRetired(uint _certificateId, bool _retired) external onlyOwner {\n        CertificateSpecificContract.CertificateSpecific storage certificate = getCertificateInternally(_certificateId);\n        certificate.retired = _retired;\n    }\n\n    /// @notice returns the number of children of a certificate\n    /// @param _certificateId the certificate-id\n    /// @return the number of children of a certificate\n    function getCertificateChildrenLength(uint _certificateId)\n        external\n        onlyOwner\n        view\n        returns (uint)\n    {\n        return getCertificateInternally(_certificateId).children.length;\n    }\n\n\n    /// @notice gets the datalog (lastSmartMeterReadFileHash) of a certificate\n    /// @param _certificateId the id of a certificate\n    /// @return datalog\n    function getDataLog(uint _certificateId) external onlyOwner returns (string memory){\n        return getCertificateInternally(_certificateId).dataLog;\n    }\n\n    /// @notice gets the maximum owner changes of a certificate\n    /// @param _certificateId the id of a certificate\n    /// @return the maximum owner changes\n    function getMaxOwnerChanges(uint _certificateId) external onlyOwner returns (uint){\n        return getCertificateInternally(_certificateId).maxOwnerChanges;\n    }\n\n    /// @notice returns the owner change counter\n    /// @param _certificateId the of a certificate\n    /// @return owner change counter\n    function getOwnerChangeCounter(uint _certificateId) external onlyOwner returns (uint){\n        return getCertificateInternally(_certificateId).ownerChangeCounter;\n    }\n\n    /// @notice gets the flag whether the certificate is retired\n    /// @param _certificateId the id of a certificate\n    /// @return flag whether a certificate is retired\n    function getRetired(uint _certificateId) external onlyOwner returns (bool){\n        return getCertificateInternally(_certificateId).retired;\n    }\n\n    /**\n        public functions\n     */\n\n    /// @notice adds a children to a certificate\n    /// @param _certificateId the id of a certificate\n    /// @param _childId the id of the child\n    function addChildrenExternal(uint _certificateId, uint _childId) public onlyOwner {\n        addChildren(_certificateId, _childId);\n    }\n\n\t/// @notice Adds a certificate-Id as child to an existing certificate\n\t/// @param _certificateId The array position in which the parent certificate is stored\n\t/// @param _childId The array position in which the child certificate is stored\n    function addChildren(uint _certificateId, uint _childId) public onlyOwner {\n        getCertificateInternally(_certificateId).children.push(_childId);\n    }\n\n}\n", "networks": "{}" }
