"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const ew_asset_registry_contracts_1 = require("ew-asset-registry-contracts");
const migrateContracts_1 = require("../utils/migrateContracts");
const OriginContractLookup_1 = require("../wrappedContracts/OriginContractLookup");
const web3_1 = __importDefault(require("web3"));
const __1 = require("..");
const EnergyLogic_1 = require("../wrappedContracts/EnergyLogic");
const EnergyDB_1 = require("../wrappedContracts/EnergyDB");
const ew_market_contracts_1 = require("ew-market-contracts");
describe('SonnenLogic', () => {
    let assetRegistryContract;
    let originRegistryContract;
    let sonennLogic;
    let sonnenDB;
    let isGanache;
    let userRegistryContract;
    let assetRegistry;
    let userLogic;
    let testreceiver;
    let marketLogic;
    let marketLookup;
    let marketContracts;
    let userContracts;
    let assetContracts;
    let originContracts;
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    const assetOwnerPK = '0xc118b0425221384fe0cbbd093b2a81b1b65d0330810e0792c7059e518cea5383';
    const accountAssetOwner = web3.eth.accounts.privateKeyToAccount(assetOwnerPK).address;
    const traderPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const accountTrader = web3.eth.accounts.privateKeyToAccount(traderPK).address;
    const assetSmartmeterPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const assetSmartmeter = web3.eth.accounts.privateKeyToAccount(assetSmartmeterPK).address;
    const matcherPK = '0xd9d5e7a2ebebbad1eb22a63baa739a6c6a6f15d07fcc990ea4dea5c64022a87a';
    const matcherAccount = web3.eth.accounts.privateKeyToAccount(matcherPK).address;
    const approvedPK = '0x7da67da863672d4cc2984e93ce28d98b0d782d8caa43cd1c977b919c0209541b';
    const approvedAccount = web3.eth.accounts.privateKeyToAccount(approvedPK).address;
    const assetSmartmeter2PK = '0x554f3c1470e9f66ed2cf1dc260d2f4de77a816af2883679b1dc68c551e8fa5ed';
    const assetSmartMeter2 = web3.eth.accounts.privateKeyToAccount(assetSmartmeter2PK).address;
    describe('init checks', () => {
        it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
            // isGanache = (await getClientVersion(web3)).includes('EthereumJS');
            userContracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
            userLogic = new ew_user_registry_contracts_1.UserLogic(web3, userContracts.UserLogic);
            yield userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });
            yield userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });
            const userContractLookupAddr = userContracts.UserContractLookup;
            userRegistryContract = new ew_user_registry_contracts_1.UserContractLookup(web3, userContractLookupAddr);
            assetContracts = yield ew_asset_registry_contracts_1.migrateSonnenAssetRegistryContracts(web3, userContractLookupAddr, privateKeyDeployment);
            const assetRegistryLookupAddr = assetContracts.AssetContractLookup;
            const assetProducingAddr = assetContracts.AssetProducingRegistryLogic;
            originContracts = yield migrateContracts_1.migrateSonnenContracts(web3, assetRegistryLookupAddr, privateKeyDeployment);
            marketContracts = yield ew_market_contracts_1.migrateMarketRegistryContracts(web3, assetRegistryLookupAddr, privateKeyDeployment);
            marketLogic = new ew_market_contracts_1.MarketLogic(web3, marketContracts.MarketLogic);
            marketLookup = new ew_market_contracts_1.MarketContractLookup(web3, marketContracts.MarketContractLookup);
            assetRegistryContract = new ew_asset_registry_contracts_1.AssetContractLookup(web3, assetRegistryLookupAddr);
            assetRegistry = new ew_asset_registry_contracts_1.SonnenProducingAssetLogic(web3, assetProducingAddr);
            // originRegistryContract = new OriginContractLookup((web3 as any));
            // certificateLogic = new CertificateLogic((web3 as any));
            // certificateDB = new CertificateDB((web3 as any));
            // assetRegistry = new AssetProducingRegistryLogic((web3 as any), assetProducingAddr);
            Object.keys(originContracts).forEach((key) => __awaiter(this, void 0, void 0, function* () {
                let tempBytecode;
                if (key.includes('OriginContractLookup')) {
                    originRegistryContract = new OriginContractLookup_1.OriginContractLookup(web3, originContracts[key]);
                    tempBytecode = '0x' + __1.OriginContractLookupJSON.deployedBytecode;
                }
                if (key.includes('SonnenLogic')) {
                    sonennLogic = new EnergyLogic_1.EnergyLogic(web3, originContracts[key]);
                    tempBytecode = '0x' + __1.EnergyLogicJSON.deployedBytecode;
                }
                if (key.includes('SonnenDB')) {
                    sonnenDB = new EnergyDB_1.EnergyDB(web3, originContracts[key]);
                    tempBytecode = '0x' + __1.EnergyDBJSON.deployedBytecode;
                }
                const deployedBytecode = yield web3.eth.getCode(originContracts[key]);
                chai_1.assert.isTrue(deployedBytecode.length > 0);
                chai_1.assert.equal(deployedBytecode, tempBytecode);
            }));
        }));
        it('should set right roles to users', () => __awaiter(this, void 0, void 0, function* () {
            yield userLogic.setUser(accountTrader, 'trader', { privateKey: privateKeyDeployment });
            yield userLogic.setUser(accountAssetOwner, 'assetOwner', { privateKey: privateKeyDeployment });
            yield userLogic.setRoles(accountTrader, 16, { privateKey: privateKeyDeployment });
            yield userLogic.setRoles(accountAssetOwner, 24, { privateKey: privateKeyDeployment });
        }));
        it('should onboard an asset', () => __awaiter(this, void 0, void 0, function* () {
            yield assetRegistry.createSonnenAsset(assetSmartmeter, accountAssetOwner, true, ['0x1000000000000000000000000000000000000005'], 'propertiesDocumentHash', 'url', 2, marketLookup.web3Contract._address, {
                privateKey: privateKeyDeployment,
            });
        }));
        it('should set MarketLogicAddress', () => __awaiter(this, void 0, void 0, function* () {
            yield assetRegistry.setMarketLookupContract(0, originRegistryContract.web3Contract._address, { privateKey: assetOwnerPK });
            chai_1.assert.equal(yield assetRegistry.getMarketLookupContract(0), originRegistryContract.web3Contract._address);
        }));
        it('should create a demand', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createDemand('Saxonia', Date.now(), Date.now() + 1000, 1000, { privateKey: traderPK });
            console.log(yield marketLogic.getDemand(0));
        }));
        it('should create a supply', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createSupply([0], 'Saxonia', Date.now(), Date.now() + 1000, 1000, 100, 10, { privateKey: traderPK });
        }));
        it('should create an agreement', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createAgreement(0, [0], { privateKey: traderPK });
        }));
        it('should log energy', () => __awaiter(this, void 0, void 0, function* () {
            const tx = yield assetRegistry.saveSonnenSmartMeterRead(0, 500, 'lastSmartMeterReadFileHash', Date.now() - 1000, Date.now(), 10, 10, 'url', { privateKey: assetSmartmeterPK });
            const event = (yield assetRegistry.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
            chai_1.assert.equal(event.event, 'LogNewMeterRead');
            chai_1.assert.deepEqual(event.returnValues, {
                0: '0',
                1: '0',
                2: '500',
                _assetId: '0',
                _oldMeterRead: '0',
                _newMeterRead: '500',
            });
            console.log(tx);
            console.log(yield assetRegistry.getSonnenAssetById(0));
            /* console.log('\nDemand:');
           console.log(await marketLogic.getDemand(0));
           console.log('\nSupply:');
           console.log(await marketLogic.getSupply(0));
           console.log('\nagreement:');
           console.log(await marketLogic.getAgreement(0));
           */
        }));
        it('should onboard an 2nd asset', () => __awaiter(this, void 0, void 0, function* () {
            yield assetRegistry.createSonnenAsset(assetSmartMeter2, accountAssetOwner, true, ['0x1000000000000000000000000000000000000005'], 'propertiesDocumentHash 2', 'url 2', 2, marketLookup.web3Contract._address, {
                privateKey: privateKeyDeployment,
            });
            console.log(yield assetRegistry.getSonnenAssetById(1));
        }));
        it('should set MarketLogicAddress', () => __awaiter(this, void 0, void 0, function* () {
            yield assetRegistry.setMarketLookupContract(1, originRegistryContract.web3Contract._address, { privateKey: assetOwnerPK });
            chai_1.assert.equal(yield assetRegistry.getMarketLookupContract(1), originRegistryContract.web3Contract._address);
        }));
        it('should create a demand', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createDemand('Saxonia 2', Date.now(), Date.now() + 1000, 1000, { privateKey: traderPK });
            // console.log(await marketLogic.getDemand(0));
        }));
        it('should create a supply', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createSupply([1], 'Saxonia 2', Date.now(), Date.now() + 1000, 1000, 100, 10, { privateKey: traderPK });
        }));
        it('should create an agreement', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createAgreement(1, [1], { privateKey: traderPK });
        }));
        it('should log energy', () => __awaiter(this, void 0, void 0, function* () {
            yield assetRegistry.getSonnenAssetById(1);
            const tx = yield assetRegistry.saveSonnenSmartMeterRead(1, 750, 'lastSmartMeterReadFileHash2', Date.now() - 1000, Date.now(), 10, 10, 'url2', { privateKey: assetSmartmeter2PK });
            // console.log(tx);
            console.log(yield sonennLogic.getAllLogTestEvents());
            const event = (yield assetRegistry.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
            chai_1.assert.equal(event.event, 'LogNewMeterRead');
            chai_1.assert.deepEqual(event.returnValues, {
                0: '1',
                1: '0',
                2: '750',
                _assetId: '1',
                _oldMeterRead: '0',
                _newMeterRead: '750',
            });
            console.log(yield sonennLogic.getReportedFlexibility(0));
            console.log('#1');
            console.log(yield sonennLogic.getReportedFlexibility(1));
            console.log('demand');
            console.log(yield marketLogic.getDemand(0));
            console.log(yield marketLogic.getDemand(1));
            console.log('supply');
            console.log(yield marketLogic.getSupply(0));
            console.log(yield marketLogic.getSupply(1));
            console.log('events:');
            console.log(yield sonennLogic.getAllLogFlexibilityCreatedEvents());
        }));
        it('should create a 3r demand', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createDemand('Saxonia 3', Date.now(), Date.now() + 1000, 1000, { privateKey: traderPK });
            // console.log(await marketLogic.getDemand(0));
        }));
        it('should create a supply', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createSupply([0, 1], 'Saxonia 2', Date.now(), Date.now() + 1000, 1000, 100, 10, { privateKey: traderPK });
            console.log(yield marketLogic.getSupply(2));
            console.log('\nasset1');
            console.log(yield assetRegistry.getSonnenAssetById(0));
            console.log('\nasset2');
            console.log(yield assetRegistry.getSonnenAssetById(1));
        }));
        it('should create an agreement', () => __awaiter(this, void 0, void 0, function* () {
            yield marketLogic.createAgreement(2, [2], { privateKey: traderPK });
        }));
        it('should log energy', () => __awaiter(this, void 0, void 0, function* () {
            console.log('asset 1 logging');
            const tx = yield assetRegistry.saveSonnenSmartMeterRead(0, 750, 'lastSmartMeterReadFileHash1-2', Date.now() - 1000, Date.now(), 10, 10, 'url1 - 2', { privateKey: assetSmartmeterPK });
            console.log('demand after 1');
            console.log(yield marketLogic.getDemand(2));
            console.log('supply after 1');
            console.log(yield marketLogic.getSupply(2));
            const tx2 = yield assetRegistry.saveSonnenSmartMeterRead(1, 1000, 'lastSmartMeterReadFileHash2-2', Date.now() - 1000, Date.now(), 10, 10, 'url2 - 2', { privateKey: assetSmartmeter2PK });
            console.log('demand after 2');
            console.log(yield marketLogic.getDemand(2));
            console.log('supply after 2');
            console.log(yield marketLogic.getSupply(2));
            console.log('TE 0');
            console.log(yield sonennLogic.getTradableEntity(0));
            console.log('TE 1');
            console.log(yield sonennLogic.getTradableEntity(1));
            console.log('TE 2');
            console.log(yield sonennLogic.getTradableEntity(2));
            console.log('assetOwner ' + accountAssetOwner);
            console.log('trader ' + accountTrader);
        }));
    });
});
//# sourceMappingURL=SonnenOriginTest.js.map