"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GeneralFunctions_1 = require("./GeneralFunctions");
const TestReceiver_json_1 = __importDefault(require("../../contract-build/TestReceiver.json"));
class TestReceiver extends GeneralFunctions_1.GeneralFunctions {
    constructor(web3, address) {
        super(address ? new web3.eth.Contract(TestReceiver_json_1.default.abi, address) : new web3.eth.Contract(TestReceiver_json_1.default.abi, TestReceiver_json_1.default.networks.length > 0 ? (TestReceiver_json_1.default.networks[0]) : null));
        this.buildFile = TestReceiver_json_1.default;
        this.web3 = web3;
    }
    onERC721Received(_operator, _from, _tokenId, _data, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactionParams;
            const txData = yield this.web3Contract.methods.onERC721Received(_operator, _from, _tokenId, _data)
                .encodeABI();
            let gas;
            if (txParams) {
                if (txParams.privateKey) {
                    const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                    txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                    txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                }
                if (!txParams.gas) {
                    try {
                        gas = yield this.web3Contract.methods.onERC721Received(_operator, _from, _tokenId, _data)
                            .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                    }
                    catch (ex) {
                        if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                            throw new Error(ex);
                        const errorResult = yield this.getErrorMessage(this.web3, {
                            from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            to: this.web3Contract._address,
                            data: txData,
                            gas: this.web3.utils.toHex(7000000)
                        });
                        throw new Error(errorResult);
                    }
                    gas = Math.round(gas * 2);
                    txParams.gas = gas;
                }
                transactionParams = {
                    from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                    gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                    data: txParams.data ? txParams.data : '',
                    to: this.web3Contract._address,
                    privateKey: txParams.privateKey ? txParams.privateKey : ""
                };
            }
            else {
                transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                    gas: Math.round(gas * 1.1 + 21000),
                    gasPrice: 0,
                    nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                    data: '',
                    to: this.web3Contract._address,
                    privateKey: ""
                };
            }
            if (transactionParams.privateKey !== '') {
                transactionParams.data = txData;
                return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
            }
            else {
                return yield this.web3Contract.methods.onERC721Received(_operator, _from, _tokenId, _data)
                    .send({ from: transactionParams.from, gas: transactionParams.gas });
            }
        });
    }
    safeTransferFrom(_from, _to, _entityId, _data, txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            if (_data) {
                {
                    let transactionParams;
                    const txData = yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId, _data)
                        .encodeABI();
                    let gas;
                    if (txParams) {
                        if (txParams.privateKey) {
                            const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                            txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                            txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                        }
                        if (!txParams.gas) {
                            try {
                                gas = yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId, _data)
                                    .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                            }
                            catch (ex) {
                                if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                                    throw new Error(ex);
                                const errorResult = yield this.getErrorMessage(this.web3, {
                                    from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                                    to: this.web3Contract._address,
                                    data: txData,
                                    gas: this.web3.utils.toHex(7000000)
                                });
                                throw new Error(errorResult);
                            }
                            gas = Math.round(gas * 2);
                            txParams.gas = gas;
                        }
                        transactionParams = {
                            from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                            gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                            gasPrice: 0,
                            nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                            data: txParams.data ? txParams.data : '',
                            to: this.web3Contract._address,
                            privateKey: txParams.privateKey ? txParams.privateKey : ""
                        };
                    }
                    else {
                        transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                            gas: Math.round(gas * 1.1 + 21000),
                            gasPrice: 0,
                            nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                            data: '',
                            to: this.web3Contract._address,
                            privateKey: ""
                        };
                    }
                    if (transactionParams.privateKey !== '') {
                        transactionParams.data = txData;
                        return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
                    }
                    else {
                        return yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId, _data)
                            .send({ from: transactionParams.from, gas: transactionParams.gas });
                    }
                }
            }
            else {
                let transactionParams;
                const txData = yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId)
                    .encodeABI();
                let gas;
                if (txParams) {
                    if (txParams.privateKey) {
                        const privateKey = txParams.privateKey.startsWith("0x") ? txParams.privateKey : "0x" + txParams.privateKey;
                        txParams.from = this.web3.eth.accounts.privateKeyToAccount(privateKey).address;
                        txParams.nonce = txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from));
                    }
                    if (!txParams.gas) {
                        try {
                            gas = yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId)
                                .estimateGas({ from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0] });
                        }
                        catch (ex) {
                            if (!(yield GeneralFunctions_1.getClientVersion(this.web3)).includes('Parity'))
                                throw new Error(ex);
                            const errorResult = yield this.getErrorMessage(this.web3, {
                                from: txParams ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                                to: this.web3Contract._address,
                                data: txData,
                                gas: this.web3.utils.toHex(7000000)
                            });
                            throw new Error(errorResult);
                        }
                        gas = Math.round(gas * 2);
                        txParams.gas = gas;
                    }
                    transactionParams = {
                        from: txParams.from ? txParams.from : (yield this.web3.eth.getAccounts())[0],
                        gas: txParams.gas ? txParams.gas : Math.round(gas * 1.1 + 21000),
                        gasPrice: 0,
                        nonce: txParams.nonce ? txParams.nonce : (yield this.web3.eth.getTransactionCount(txParams.from)),
                        data: txParams.data ? txParams.data : '',
                        to: this.web3Contract._address,
                        privateKey: txParams.privateKey ? txParams.privateKey : ""
                    };
                }
                else {
                    transactionParams = { from: (yield this.web3.eth.getAccounts())[0],
                        gas: Math.round(gas * 1.1 + 21000),
                        gasPrice: 0,
                        nonce: (yield this.web3.eth.getTransactionCount((yield this.web3.eth.getAccounts())[0])),
                        data: '',
                        to: this.web3Contract._address,
                        privateKey: ""
                    };
                }
                if (transactionParams.privateKey !== '') {
                    transactionParams.data = txData;
                    return (yield this.sendRaw(this.web3, transactionParams.privateKey, transactionParams));
                }
                else {
                    return yield this.web3Contract.methods.safeTransferFrom(_from, _to, _entityId)
                        .send({ from: transactionParams.from, gas: transactionParams.gas });
                }
            }
        });
    }
    entityContract(txParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.web3Contract.methods.entityContract().call(txParams));
        });
    }
}
exports.TestReceiver = TestReceiver;
//# sourceMappingURL=TestReceiver.js.map