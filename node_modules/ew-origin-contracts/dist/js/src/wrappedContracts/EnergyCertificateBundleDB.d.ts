import { GeneralFunctions, SpecialTx, SearchLog } from './GeneralFunctions';
import Web3 = require('web3');
export declare class EnergyCertificateBundleDB extends GeneralFunctions {
    web3: Web3;
    buildFile: {
        "abi": ({
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": {
                    "components": {
                        "name": string;
                        "type": string;
                    }[];
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": {
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": ({
                "name": string;
                "type": string;
                "components"?: undefined;
            } | {
                "components": {
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            })[];
            "name": string;
            "outputs": any[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "components": {
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "constant"?: undefined;
            "name"?: undefined;
            "outputs"?: undefined;
            "anonymous"?: undefined;
        } | {
            "anonymous": boolean;
            "inputs": {
                "indexed": boolean;
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
            "constant"?: undefined;
            "outputs"?: undefined;
            "payable"?: undefined;
            "stateMutability"?: undefined;
        })[];
        "bytecode": string;
        "contractName": string;
        "deployedBytecode": string;
        "source": string;
        "networks": string;
    };
    constructor(web3: Web3, address?: string);
    getAllLogChangeOwnerEvents(eventFilter?: SearchLog): Promise<any>;
    getAllEvents(eventFilter?: SearchLog): Promise<any>;
    getTradableEntityOwner(_entityId: number, txParams?: SpecialTx): Promise<any>;
    getApproved(_entityId: number, txParams?: SpecialTx): Promise<any>;
    addEscrowForEntity(_entityId: number, _escrow: string, txParams?: SpecialTx): Promise<any>;
    setTradableEntityEscrowExternal(_entityId: number, _escrow: string[], txParams?: SpecialTx): Promise<any>;
    getTradableEntityEscrowLength(_entityId: number, txParams?: SpecialTx): Promise<any>;
    getBundleListLength(txParams?: SpecialTx): Promise<any>;
    setDataLog(_certificateId: number, _newDataLog: string, txParams?: SpecialTx): Promise<any>;
    getOwnerChangeCounter(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    getBundle(_bundleID: number, txParams?: SpecialTx): Promise<any>;
    getRetired(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    setTradableEntityOwnerAndAddApproval(_entityId: number, _owner: string, _approve: string, txParams?: SpecialTx): Promise<any>;
    setOwnerChangeCounter(_certificateId: number, _newOwnerChangeCounter: number, txParams?: SpecialTx): Promise<any>;
    addApprovalExternal(_entityId: number, _approve: string, txParams?: SpecialTx): Promise<any>;
    setOnChainDirectPurchasePrice(_entityId: number, _price: number, txParams?: SpecialTx): Promise<any>;
    getOwnerToOperators(_company: string, _escrow: string, txParams?: SpecialTx): Promise<any>;
    setTradableEntityOwnerExternal(_entityId: number, _owner: string, txParams?: SpecialTx): Promise<any>;
    getTradableEntity(_entityId: number, txParams?: SpecialTx): Promise<any>;
    addChildrenExternal(_certificateId: number, _childId: number, txParams?: SpecialTx): Promise<any>;
    owner(txParams?: SpecialTx): Promise<any>;
    getCertificateSpecific(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    getBalanceOf(_owner: string, txParams?: SpecialTx): Promise<any>;
    setRetired(_certificateId: number, _retired: boolean, txParams?: SpecialTx): Promise<any>;
    setMaxOwnerChanges(_certificateId: number, _newMaxOwnerChanges: number, txParams?: SpecialTx): Promise<any>;
    changeOwner(_newOwner: string, txParams?: SpecialTx): Promise<any>;
    getMaxOwnerChanges(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    removeTokenAndPrice(_entityId: number, txParams?: SpecialTx): Promise<any>;
    addChildren(_certificateId: number, _childId: number, txParams?: SpecialTx): Promise<any>;
    setCertificateSpecific(_certificateId: number, _certificate: any, txParams?: SpecialTx): Promise<any>;
    setOwnerToOperators(_company: string, _escrow: string, _allowed: boolean, txParams?: SpecialTx): Promise<any>;
    getCertificateChildrenLength(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    removeEscrow(_entityId: number, _escrow: string, txParams?: SpecialTx): Promise<any>;
    setTradableEntity(_entityId: number, _entity: any, txParams?: SpecialTx): Promise<any>;
    setTradableToken(_entityId: number, _token: string, txParams?: SpecialTx): Promise<any>;
    getOnChainDirectPurchasePrice(_entityId: number, txParams?: SpecialTx): Promise<any>;
    getDataLog(_certificateId: number, txParams?: SpecialTx): Promise<any>;
    getTradableToken(_entityId: number, txParams?: SpecialTx): Promise<any>;
    createEnergyCertificateBundle(_tradableEntity: any, _certificateSpecific: any, txParams?: SpecialTx): Promise<any>;
}
