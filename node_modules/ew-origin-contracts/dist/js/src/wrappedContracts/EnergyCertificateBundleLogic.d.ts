import { GeneralFunctions, SpecialTx, SearchLog } from './GeneralFunctions';
import Web3 = require('web3');
export declare class EnergyCertificateBundleLogic extends GeneralFunctions {
    web3: Web3;
    buildFile: {
        "abi": ({
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": {
                    "components": {
                        "name": string;
                        "type": string;
                    }[];
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": {
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "constant"?: undefined;
            "name"?: undefined;
            "outputs"?: undefined;
            "anonymous"?: undefined;
        } | {
            "anonymous": boolean;
            "inputs": {
                "indexed": boolean;
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
            "constant"?: undefined;
            "outputs"?: undefined;
            "payable"?: undefined;
            "stateMutability"?: undefined;
        })[];
        "bytecode": string;
        "contractName": string;
        "deployedBytecode": string;
        "source": string;
        "networks": string;
    };
    constructor(web3: Web3, address?: string);
    getAllLogCreatedBundleEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogBundleRetiredEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogBundleOwnerChangedEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogEscrowRemovedEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogEscrowAddedEvents(eventFilter?: SearchLog): Promise<any>;
    getAllTransferEvents(eventFilter?: SearchLog): Promise<any>;
    getAllApprovalEvents(eventFilter?: SearchLog): Promise<any>;
    getAllApprovalForAllEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogChangeOwnerEvents(eventFilter?: SearchLog): Promise<any>;
    getAllEvents(eventFilter?: SearchLog): Promise<any>;
    supportsInterface(_interfaceID: string, txParams?: SpecialTx): Promise<any>;
    getApproved(_tokenId: number, txParams?: SpecialTx): Promise<any>;
    approve(_approved: string, _entityId: number, txParams?: SpecialTx): Promise<any>;
    addEscrowForEntity(_certificateId: number, _escrow: string, txParams?: SpecialTx): Promise<any>;
    getBundleListLength(txParams?: SpecialTx): Promise<any>;
    update(_newLogic: string, txParams?: SpecialTx): Promise<any>;
    addEscrowForAsset(_bundleId: number, _escrow: string, txParams?: SpecialTx): Promise<any>;
    transferFrom(_from: string, _to: string, _entityId: number, txParams?: SpecialTx): Promise<any>;
    getBundle(_bundleId: number, txParams?: SpecialTx): Promise<any>;
    createTradableEntity(_assetId: number, _powerInW: number, txParams?: SpecialTx): Promise<any>;
    safeTransferFrom(_from: any, _to: any, _entityId: any, _data?: any, txParams?: SpecialTx): Promise<any>;
    userContractLookup(txParams?: SpecialTx): Promise<any>;
    db(txParams?: SpecialTx): Promise<any>;
    setOnChainDirectPurchasePrice(_entityId: number, _price: number, txParams?: SpecialTx): Promise<any>;
    ownerOf(_entityId: number, txParams?: SpecialTx): Promise<any>;
    assetContractLookup(txParams?: SpecialTx): Promise<any>;
    checkMatcher(_matcher: string[], txParams?: SpecialTx): Promise<any>;
    balanceOf(_owner: string, txParams?: SpecialTx): Promise<any>;
    getTradableEntity(_entityId: number, txParams?: SpecialTx): Promise<any>;
    owner(txParams?: SpecialTx): Promise<any>;
    getBundleOwner(_bundleId: number, txParams?: SpecialTx): Promise<any>;
    setApprovalForAll(_escrow: string, _approved: boolean, txParams?: SpecialTx): Promise<any>;
    changeOwner(_newOwner: string, txParams?: SpecialTx): Promise<any>;
    retireBundle(_bundleId: number, txParams?: SpecialTx): Promise<any>;
    isRole(_role: number, _caller: string, txParams?: SpecialTx): Promise<any>;
    removeEscrow(_bundleId: number, _escrow: string, txParams?: SpecialTx): Promise<any>;
    isRetired(_bundleId: number, txParams?: SpecialTx): Promise<any>;
    setTradableToken(_entityId: number, _tokenContract: string, txParams?: SpecialTx): Promise<any>;
    getOnChainDirectPurchasePrice(_entityId: number, txParams?: SpecialTx): Promise<any>;
    isApprovedForAll(_owner: string, _operator: string, txParams?: SpecialTx): Promise<any>;
    init(_database: string, _admin: string, txParams?: SpecialTx): Promise<any>;
    getTradableToken(_entityId: number, txParams?: SpecialTx): Promise<any>;
}
