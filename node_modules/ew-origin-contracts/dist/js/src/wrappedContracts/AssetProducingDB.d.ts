import { GeneralFunctions, SpecialTx, SearchLog } from './GeneralFunctions';
import Web3 = require('web3');
export declare class AssetProducingDB extends GeneralFunctions {
    web3: Web3;
    buildFile: {
        "abi": ({
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": ({
                    "components": {
                        "name": string;
                        "type": string;
                    }[];
                    "name": string;
                    "type": string;
                } | {
                    "name": string;
                    "type": string;
                    "components"?: undefined;
                })[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "components": ({
                    "components": {
                        "name": string;
                        "type": string;
                    }[];
                    "name": string;
                    "type": string;
                } | {
                    "name": string;
                    "type": string;
                    "components"?: undefined;
                })[];
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "constant"?: undefined;
            "name"?: undefined;
            "outputs"?: undefined;
            "anonymous"?: undefined;
        } | {
            "anonymous": boolean;
            "inputs": {
                "indexed": boolean;
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
            "constant"?: undefined;
            "outputs"?: undefined;
            "payable"?: undefined;
            "stateMutability"?: undefined;
        })[];
        "bytecode": string;
        "contractName": string;
        "deployedBytecode": string;
        "source": string;
        "networks": string;
    };
    constructor(web3: Web3, address?: string);
    getAllLogChangeOwnerEvents(eventFilter?: SearchLog): Promise<any>;
    getAllEvents(eventFilter?: SearchLog): Promise<any>;
    getLastSmartMeterReadWh(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getIsBundled(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getLastMeterReadingAndHash(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getAssetBySmartMeter(_smartMeter: string, txParams?: SpecialTx): Promise<any>;
    setIsBundled(_assetId: number, _bundled: boolean, txParams?: SpecialTx): Promise<any>;
    setAssetOwner(_assetId: number, _owner: string, txParams?: SpecialTx): Promise<any>;
    setLastSmartMeterReadWh(_assetId: number, _lastSmartMeterReadWh: number, txParams?: SpecialTx): Promise<any>;
    addMatcher(_assetId: number, _matcher: string, txParams?: SpecialTx): Promise<any>;
    setMatcherExternal(_assetId: number, _matcher: string[], txParams?: SpecialTx): Promise<any>;
    removeMatcherExternal(_assetId: number, _removal: string, txParams?: SpecialTx): Promise<any>;
    setMatcher(_assetId: number, _matcher: string[], txParams?: SpecialTx): Promise<any>;
    setLastSmartMeterReadFileHash(_assetId: number, _lastSmartMeterReadFileHash: string, txParams?: SpecialTx): Promise<any>;
    setMarketLookupContract(_assetId: number, _marketLookupContract: string, txParams?: SpecialTx): Promise<any>;
    setSmartMeterRead(_assetId: number, _lastSmartMeterReadWh: number, _lastSmartMeterReadFileHash: string, txParams?: SpecialTx): Promise<any>;
    getAssetOwner(_assetId: number, txParams?: SpecialTx): Promise<any>;
    owner(txParams?: SpecialTx): Promise<any>;
    changeOwner(_newOwner: string, txParams?: SpecialTx): Promise<any>;
    removeMatcher(_assetId: number, _removal: string, txParams?: SpecialTx): Promise<any>;
    getAssetGeneral(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getAssetListLength(txParams?: SpecialTx): Promise<any>;
    getAssetById(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getActive(_assetId: number, txParams?: SpecialTx): Promise<any>;
    addFullAsset(_a: any, txParams?: SpecialTx): Promise<any>;
    getMarketLookupContract(_assetId: number, txParams?: SpecialTx): Promise<any>;
    setActive(_assetId: number, _active: boolean, txParams?: SpecialTx): Promise<any>;
    getSmartMeter(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getLastSmartMeterReadFileHash(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getMatcher(_assetId: number, txParams?: SpecialTx): Promise<any>;
}
