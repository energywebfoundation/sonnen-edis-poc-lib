import { GeneralFunctions, SpecialTx, SearchLog } from './GeneralFunctions';
import Web3 = require('web3');
export declare class Erc20TestToken extends GeneralFunctions {
    web3: Web3;
    buildFile: {
        "abi": ({
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "constant"?: undefined;
            "name"?: undefined;
            "outputs"?: undefined;
            "anonymous"?: undefined;
        } | {
            "anonymous": boolean;
            "inputs": {
                "indexed": boolean;
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
            "constant"?: undefined;
            "outputs"?: undefined;
            "payable"?: undefined;
            "stateMutability"?: undefined;
        })[];
        "bytecode": string;
        "contractName": string;
        "deployedBytecode": string;
        "source": string;
        "networks": string;
    };
    constructor(web3: Web3, address?: string);
    getAllTransferEvents(eventFilter?: SearchLog): Promise<any>;
    getAllApprovalEvents(eventFilter?: SearchLog): Promise<any>;
    getAllEvents(eventFilter?: SearchLog): Promise<any>;
    name(txParams?: SpecialTx): Promise<any>;
    approve(_spender: string, _tokens: number, txParams?: SpecialTx): Promise<any>;
    totalSupplyNumber(txParams?: SpecialTx): Promise<any>;
    decimas(txParams?: SpecialTx): Promise<any>;
    totalSupply(txParams?: SpecialTx): Promise<any>;
    transferFrom(_from: string, _to: string, _tokens: number, txParams?: SpecialTx): Promise<any>;
    balances(param0: string, txParams?: SpecialTx): Promise<any>;
    allowed(param0: string, param1: string, txParams?: SpecialTx): Promise<any>;
    balanceOf(_tokenOwner: string, txParams?: SpecialTx): Promise<any>;
    owner(txParams?: SpecialTx): Promise<any>;
    symbol(txParams?: SpecialTx): Promise<any>;
    transfer(_to: string, _tokens: number, txParams?: SpecialTx): Promise<any>;
    allowance(_tokenOwner: string, _spender: string, txParams?: SpecialTx): Promise<any>;
}
