{"abi":[{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableEntityOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address"}],"name":"addEscrowForEntity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address[]"}],"name":"setTradableEntityEscrowExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableEntityEscrowLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_owner","type":"address"},{"name":"_approve","type":"address"}],"name":"setTradableEntityOwnerAndAddApproval","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_approve","type":"address"}],"name":"addApprovalExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setOnChainDirectPurchasePrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_company","type":"address"},{"name":"_escrow","type":"address"}],"name":"getOwnerToOperators","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_owner","type":"address"}],"name":"setTradableEntityOwnerExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableEntity","outputs":[{"components":[{"name":"assetId","type":"uint256"},{"name":"owner","type":"address"},{"name":"powerInW","type":"uint256"},{"name":"acceptedToken","type":"address"},{"name":"onChainDirectPurchasePrice","type":"uint256"},{"name":"escrow","type":"address[]"},{"name":"approvedAddress","type":"address"}],"name":"_entity","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getBalanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"removeTokenAndPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_company","type":"address"},{"name":"_escrow","type":"address"},{"name":"_allowed","type":"bool"}],"name":"setOwnerToOperators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address"}],"name":"removeEscrow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"components":[{"name":"assetId","type":"uint256"},{"name":"owner","type":"address"},{"name":"powerInW","type":"uint256"},{"name":"acceptedToken","type":"address"},{"name":"onChainDirectPurchasePrice","type":"uint256"},{"name":"escrow","type":"address[]"},{"name":"approvedAddress","type":"address"}],"name":"_entity","type":"tuple"}],"name":"setTradableEntity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_token","type":"address"}],"name":"setTradableToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getOnChainDirectPurchasePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_certificateLogic","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_newOwner","type":"address"}],"name":"LogChangeOwner","type":"event"}],"bytecode":"","contractName":"TradableEntityDB","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\nimport \"ew-utils-general-contracts/contracts/Msc/Owned.sol\";\nimport \"../../contracts/Interfaces/TradableEntityDBInterface.sol\";\nimport \"../../contracts/Origin/TradableEntityContract.sol\";\n\ncontract TradableEntityDB is Owned,TradableEntityDBInterface {\n\n    /// @notice mapping the amount of tokens per address\n    mapping(address => uint) internal tokenAmountMapping;\n\n    /// @notice mapping owner to operators (whether an owner has the right to transfer entities of an owner)\n    mapping(address => mapping (address => bool)) internal ownerToOperators;\n\n    /// @notice Constructor\n    /// @param _certificateLogic The address of the corresbonding logic contract\n    constructor(address _certificateLogic) Owned(_certificateLogic) public { }\n\n    /**\n        abstract function declarations\n     */\n    function getTradableEntity(uint _entityId) public view returns (TradableEntityContract.TradableEntity memory _entity);\n    function getTradableEntityInternally(uint _entityId) internal view returns (TradableEntityContract.TradableEntity storage _entity);\n    function setTradableEntity(uint _entityId, TradableEntityContract.TradableEntity memory _entity) public;\n\n    /**\n        external functions\n     */\n\n    /// @notice adds an escrow to an entity\n    /// @param _entityId the id of an entity\n    /// @param _escrow the escrow to be added\n    function addEscrowForEntity(\n        uint _entityId,\n        address _escrow\n    )\n        external\n        onlyOwner\n    {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.escrow.push(_escrow);\n    }\n\n    /// @notice adds approval for an entity (external call)\n    /// @param _entityId the id of the entity\n    /// @param _approve the address to be approved\n    function addApprovalExternal(\n        uint _entityId,\n        address _approve\n    )\n        external\n        onlyOwner\n    {\n        addApproval(_entityId, _approve);\n    }\n\n    /// @notice Removes an escrow-address of an existing bundle\n    /// @param _entityId The array position\n    /// @param _escrow the escrow-address to be removed\n    /// @return whether the address had been removed\n    function removeEscrow(uint _entityId, address _escrow) external onlyOwner  returns (bool) {\n\n        address[] storage escrows = getTradableEntityInternally(_entityId).escrow;\n        for (uint i = 0; i < escrows.length; i++){\n            if(escrows[i] == _escrow){\n                escrows[i] = escrows[escrows.length-1];\n                escrows.length--;\n                return true;\n            }\n        }\n    }\n\n    /// @notice removes accepted token and the price for an entity\n    /// @dev should be called after the transfer of an entity\n    /// @param _entityId the id of the entity\n    function removeTokenAndPrice(uint _entityId) external onlyOwner {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.onChainDirectPurchasePrice = 0;\n        te.acceptedToken = address(0);\n    }\n\n    /// @notice sets the price (as ERC20 token) for direct onchain purchasement\n    /// @param _entityId the id of the entity\n    /// @param _price the new price (as ERC20 tokens)\n    function setOnChainDirectPurchasePrice(uint _entityId, uint _price) external onlyOwner {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.onChainDirectPurchasePrice = _price;\n    }\n\n    /// @notice set the flag whether an escrow is allowed to transfer entites of a company\n    /// @param _company the owner of certificates\n    /// @param _escrow the escrow / matcher\n    /// @param _allowed flag whether the escrow is allowed to transfer entities of a company\n    function setOwnerToOperators(\n        address _company,\n        address _escrow,\n        bool _allowed\n    )\n        external\n        onlyOwner\n    {\n        ownerToOperators[_company][_escrow] = _allowed;\n    }\n\n    /// @notice sets the tradableOwner, gets called externally\n    /// @param _entityId the entity-id\n    /// @param _owner the new owner of the entity\n    function setTradableEntityOwnerExternal(\n        uint _entityId,\n        address _owner\n    )\n        external\n        onlyOwner\n    {\n        setTradableEntityOwner(_entityId, _owner);\n    }\n\n    /// @notice sets an array of escrows for an entity, gets called externally\n    /// @param _entityId the entity-id\n    /// @param _escrow the array with escrow-addresses\n    function setTradableEntityEscrowExternal(uint _entityId, address[] calldata _escrow) external onlyOwner {\n        setTradableEntityEscrow(_entityId, _escrow);\n    }\n\n    /// @notice sets the tradable token (ERC20 contracts) of an entity\n    /// @param _entityId the entity-id\n    /// @param _token the ERC20-tokenaddress\n    function setTradableToken(\n        uint _entityId,\n        address _token\n    )\n        external\n        onlyOwner\n    {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.acceptedToken = _token;\n    }\n\n    /// @notice gets the approved address for an entity\n    /// @param _entityId the id of an entity\n    /// @return the approved address of an entity\n    function getApproved(uint256 _entityId) onlyOwner external view returns (address){\n        return getTradableEntity(_entityId).approvedAddress;\n    }\n\n    /// @notice gets the balance of tokens for an address\n    /// @param _owner the owner of tokens\n    /// @return the balane of the owner\n    function getBalanceOf(address _owner)\n        external\n        onlyOwner\n        view\n        returns (uint)\n    {\n        return tokenAmountMapping[_owner];\n    }\n\n    /// @notice gets the price for a direct purchase onchain\n    /// @param _entityId the entity-id\n    function getOnChainDirectPurchasePrice(\n        uint _entityId\n    )\n        external\n        onlyOwner\n        view\n        returns (uint)\n    {\n        return getTradableEntity(_entityId).onChainDirectPurchasePrice;\n    }\n\n    /// @notice returns whether the provided address is allowed to transfer certificates for a company\n    /// @param _company address owning tokens\n    /// @param _escrow the escrow / matcher\n    /// @return whether the escrow is allowed to transfer certificates for a company\n    function getOwnerToOperators(\n        address _company,\n        address _escrow\n    )\n        external\n        onlyOwner\n        view\n        returns (bool)\n    {\n        return ownerToOperators[_company][_escrow];\n    }\n\n    /// @notice gets the ERC20-token address for an entity\n    /// @param _entityId the entity-id\n    /// @return the ERC20-token address\n    function getTradableToken(\n        uint _entityId\n    )\n        external\n        onlyOwner\n        view\n        returns (address)\n    {\n        return getTradableEntity(_entityId).acceptedToken;\n    }\n\n    /// @notice gets the owner of a tradableEntity\n    /// @param _entityId the entity-id\n    /// @return the owner of a tradable entity\n    function getTradableEntityOwner(uint _entityId) external onlyOwner view returns (address){\n        return getTradableEntity(_entityId).owner;\n    }\n\n    /// @notice gets the number of escrow addresses for a tradable entity\n    /// @param _entityId the entitiy-id\n    /// @return the number of escrows for an entity\n    function getTradableEntityEscrowLength(uint _entityId) external onlyOwner view returns (uint){\n        return getTradableEntity(_entityId).escrow.length;\n    }\n\n    /// @notice sets the TradableEntityOwner and adds approval\n    /// @param _entityId the id of an entity\n    /// @param _owner the new owner of an entity\n    /// @param _approve the approved address for an entity\n    function setTradableEntityOwnerAndAddApproval(\n        uint _entityId,\n        address _owner,\n        address _approve\n    )\n        external\n        onlyOwner\n    {\n        setTradableEntityOwner(_entityId, _owner);\n        addApproval(_entityId, _approve);\n    }\n\n    /**\n        internal functions\n     */\n\n    /// @notice apprives an address for an entity\n    /// @param _entityId the if of an entity\n    /// @param _approve the address to be approved\n    function addApproval(uint _entityId, address _approve) internal {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.approvedAddress = _approve;\n    }\n\n    /// @notice changes the balances of token when a token gets transfered\n    /// @param _old owner of an entity before transfer\n    /// @param _new owner of an entity after the transfer\n    function changeCertOwner(address _old, address _new) internal {\n        require(tokenAmountMapping[_old] > 0);\n        tokenAmountMapping[_old]--;\n        tokenAmountMapping[_new]++;\n    }\n\n    /// @notice Sets the owner of an entity\n    /// @param _entityId The array position in which the entity is stored\n    /// @param _owner The address of the new owner\n    function setTradableEntityOwner(uint _entityId, address _owner) internal {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        address oldOwner = te.owner;\n        te.owner = _owner;\n        changeCertOwner(oldOwner,_owner);\n\n    }\n\n    /// @notice sets the escrow-addresses of a certificate\n    /// @param _entityId the entity-id\n    /// @param _escrow new escrow-addresses\n    function setTradableEntityEscrow(uint _entityId, address[] memory _escrow)\n        internal\n    {\n        TradableEntityContract.TradableEntity storage te = getTradableEntityInternally(_entityId);\n        te.escrow = _escrow;\n    }\n\n\n}\n","networks":"{}"}