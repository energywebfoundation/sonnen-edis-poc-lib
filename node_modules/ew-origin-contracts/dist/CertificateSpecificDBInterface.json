{"abi":[{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"},{"name":"_newDataLog","type":"string"}],"name":"setDataLog","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"}],"name":"getOwnerChangeCounter","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"}],"name":"getRetired","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"},{"name":"_newOwnerChangeCounter","type":"uint256"}],"name":"setOwnerChangeCounter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateId","type":"uint256"},{"name":"_childId","type":"uint256"}],"name":"addChildrenExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"},{"name":"_retired","type":"bool"}],"name":"setRetired","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"},{"name":"_newMaxOwnerChanges","type":"uint256"}],"name":"setMaxOwnerChanges","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"}],"name":"getMaxOwnerChanges","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_certificateID","type":"uint256"}],"name":"getCertificateChildrenLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_certificateID","type":"uint256"}],"name":"getDataLog","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"","contractName":"CertificateSpecificDBInterface","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\ninterface CertificateSpecificDBInterface {\n\n    /// @notice gets whether the certificate has the retired flag\n    /// @param _certificateID the certificate id\n    ///@return retired flag\n    function getRetired(uint _certificateID) external returns (bool);\n\n    /// @notice sets the retired flag for a certificate\n    /// @param _certificateID the certificate id\n    /// @param _retired the retired flag\n    function setRetired(uint _certificateID, bool _retired) external;\n\n\n    /// @notice gets the dataLog for a certificate\n    /// @param _certificateID the certificate id\n    /// @return the dataLog\n    function getDataLog(uint _certificateID) external returns (string memory);\n\n    /// @notice sets the datalog for a certificate\n    /// @param _certificateID the certificate id\n    /// @param _newDataLog new datalog\n    function setDataLog(uint _certificateID, string calldata _newDataLog) external;\n\n\n    /// @notice gets the max owner changes for a certificate\n    /// @param _certificateID the certificate id\n    /// @return the number of max owner changes\n    function getMaxOwnerChanges(uint _certificateID) external returns (uint);\n\n    /// @notice sets the max owner changes for a certificate\n    /// @param _certificateID the certificate id\n    /// @param _newMaxOwnerChanges the new max owner changes\n    function setMaxOwnerChanges(uint _certificateID, uint _newMaxOwnerChanges) external;\n\n\n    /// @notice gets the counter for owner changes\n    /// @param _certificateID the certificate id\n    /// @return the counter for owner changes\n    function getOwnerChangeCounter(uint _certificateID) external returns (uint);\n\n    /// @notice sets the counter for owner changes\n    /// @param _certificateID the certificate id\n    /// @param _newOwnerChangeCounter new counter for owner changes\n    function setOwnerChangeCounter(uint _certificateID, uint _newOwnerChangeCounter) external;\n\n\n    /// @notice gets the amount of children for a certificate\n    /// @param _certificateID the certificate id\n    /// @return returns the amount of children of a certificate\n    function getCertificateChildrenLength(uint _certificateID) external view returns (uint);\n\n    /// @notice add Children\n\t/// @param _certificateId the certificate Id\n\t/// @param _childId the child Id\n    function addChildrenExternal(uint _certificateId, uint _childId) external;\n}\n","networks":"{}"}