{"abi":[{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableEntityOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address"}],"name":"addEscrowForEntity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address[]"}],"name":"setTradableEntityEscrowExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableEntityEscrowLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_owner","type":"address"},{"name":"_approve","type":"address"}],"name":"setTradableEntityOwnerAndAddApproval","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_approve","type":"address"}],"name":"addApprovalExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setOnChainDirectPurchasePrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_company","type":"address"},{"name":"_escrow","type":"address"}],"name":"getOwnerToOperators","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_owner","type":"address"}],"name":"setTradableEntityOwnerExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getBalanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"removeTokenAndPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_company","type":"address"},{"name":"_escrow","type":"address"},{"name":"_allowed","type":"bool"}],"name":"setOwnerToOperators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_escrow","type":"address"}],"name":"removeEscrow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_entityId","type":"uint256"},{"name":"_token","type":"address"}],"name":"setTradableToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getOnChainDirectPurchasePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_entityId","type":"uint256"}],"name":"getTradableToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"","contractName":"TradableEntityDBInterface","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it;\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\ninterface TradableEntityDBInterface {\n\n    /// @notice adds an approved address to an entity\n    /// @param _entityId the id of the entity\n    /// @param _approve the approved address\n    function addApprovalExternal(uint _entityId, address _approve) external;\n\n    /// @notice adds an escrow for an entity\n    /// @param _entityId the id of the entity\n    /// @param _escrow the address of the escrow\n    function addEscrowForEntity(uint _entityId, address _escrow) external;\n\n    /// @notice sets the owner of a tradableEntity\n    /// @param _entityId the id of the entity\n    /// @param _owner the new owner\n    function setTradableEntityOwnerExternal(uint _entityId, address _owner) external;\n\n    /// @notice sets a tradable token for an entity\n    /// @param _entityId the entityId\n    /// @param _token the address of the ERC20 token address\n    function setTradableToken(uint _entityId, address _token) external;\n\n    /// @notice sets the onchain direct purchase price\n    /// @param _entityId the id of the entity\n    /// @param _price the price\n    function setOnChainDirectPurchasePrice(uint _entityId, uint _price) external;\n\n    /// @notice removes accepted token and onchain direct purchase price for an entity\n    /// @param _entityId the id of the entity\n    function removeTokenAndPrice(uint _entityId) external;\n\n    /// @notice remmives an escrow-address for an entity\n    /// @param _entityId the id of the entity\n    /// @param _escrow the escrow address to be removed\n    /// @return true if the removal was successfull\n    function removeEscrow(uint _entityId, address _escrow) external returns (bool);\n\n    /// @notice sets the flags whether an escrow can transfer the certificates of a company\n    /// @param _company the owner of certificates\n    /// @param _escrow the escrow address (matcher)\n    /// @param _allowed flag whether the escrow is allowed to transfer certificates\n    function setOwnerToOperators(address _company, address _escrow, bool _allowed) external;\n\n    /// @notice sets the owner of a tradableEntity and adds approval\n    /// @param _entityId the id of the entity\n    /// @param _owner the new owner\n    /// @param _approve the approved address\n    function setTradableEntityOwnerAndAddApproval(uint _entityId, address _owner, address _approve) external;\n\n    /// @notice sets the escrows for a tradableEntity\n    /// @param _entityId the id of the entity\n    /// @param _escrow array with escrows\n    function setTradableEntityEscrowExternal(uint _entityId, address[] calldata _escrow) external;\n\n\n    /// @notice gets the approved address for an entity\n    /// @param _entityId the id of the enitity\n    /// @return approved address\n    function getApproved(uint256 _entityId) external view returns (address);\n\n    /// @notice gets the balance of an account\n    /// @param _owner the account\n    /// @return the balance of the account\n    function getBalanceOf(address _owner) external view returns (uint);\n\n    /// @notice gets the tradable-token (ERC20) for an entity\n    /// @param _entityId the id of the entity\n    /// @return the address of a ERC20 token\n    function getTradableToken(uint _entityId) external view returns (address);\n\n    /// @notice gets the owner of a tradable entity\n    /// @param _entityId the id of the entity\n    /// @return the owner of a tradable entity\n    function getTradableEntityOwner(uint _entityId) external view returns (address);\n\n    /// @notice gets the number of escrows for a tradable entity\n    /// @param _entityId the id of the entity\n    /// @return the number of escrows for the tradable entity\n    function getTradableEntityEscrowLength(uint _entityId) external view returns (uint);\n\n    /// @notice gets the onchain direct purchase price for an entity\n    /// @param _entityId the id of the entity\n    /// @return the onchain direct purchase price for an entity\n    function getOnChainDirectPurchasePrice(uint _entityId) external view returns (uint);\n\n    /// @notice gets whether the provided address is an operator/escrow for the company\n    /// @param _company the company owning tokens\n    /// @param _escrow the provided escrow address\n    /// @return whether the provided address is an operator/escrow for the company\n    function getOwnerToOperators(address _company, address _escrow) external view returns (bool);\n\n}\n","networks":"{}"}