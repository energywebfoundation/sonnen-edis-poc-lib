"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Heiko Burkhardt, heiko.burkhardt@slock.it; Martin Kuechler, martin.kuchler@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Asset = __importStar(require("./Asset"));
const __1 = require("..");
exports.createAsset = (assetProperties, assetPropertiesOffChain, configuration) => __awaiter(this, void 0, void 0, function* () {
    const consumingAsset = new Entity(null, configuration);
    const offChainStorageProperties = consumingAsset.prepareEntityCreation(assetProperties, assetPropertiesOffChain, __1.AssetPropertiesOffchainSchema);
    if (configuration.offChainDataSource) {
        assetProperties.url = consumingAsset.getUrl();
        assetProperties.propertiesDocumentHash = offChainStorageProperties.rootHash;
    }
    const tx = yield configuration.blockchainProperties.consumingAssetLogicInstance.createAsset(assetProperties.smartMeter.address, assetProperties.owner.address, assetProperties.active, assetProperties.matcher.map((matcher) => matcher.address), assetProperties.propertiesDocumentHash, assetProperties.url, {
        from: configuration.blockchainProperties.activeUser.address,
        privateKey: configuration.blockchainProperties.activeUser.privateKey,
    });
    consumingAsset.id = configuration.blockchainProperties.web3.utils.hexToNumber(tx.logs[0].topics[1]).toString();
    yield consumingAsset.putToOffChainStorage(assetPropertiesOffChain, offChainStorageProperties);
    if (configuration.logger) {
        configuration.logger.info(`Consuming asset ${consumingAsset.id} created`);
    }
    return consumingAsset.sync();
});
exports.getAssetListLength = (configuration) => __awaiter(this, void 0, void 0, function* () {
    return parseInt(yield configuration.blockchainProperties.consumingAssetLogicInstance.getAssetListLength(), 10);
});
exports.getAllAssets = (configuration) => __awaiter(this, void 0, void 0, function* () {
    const assetsPromises = Array(yield exports.getAssetListLength(configuration))
        .fill(null)
        .map((item, index) => (new Entity(index.toString(), configuration)).sync());
    return Promise.all(assetsPromises);
});
exports.getAllAssetsOwnedBy = (owner, configuration) => __awaiter(this, void 0, void 0, function* () {
    return (yield exports.getAllAssets(configuration))
        .filter((asset) => asset.owner.address.toLowerCase() === owner.toLowerCase());
});
class Entity extends Asset.Entity {
    getUrl() {
        return `${this.configuration.offChainDataSource.baseUrl}/ConsumingAsset`;
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            const asset = yield this.configuration.blockchainProperties.consumingAssetLogicInstance.getAssetById(this.id);
            if (this.id != null) {
                this.smartMeter = { address: asset.assetGeneral.smartMeter };
                this.owner = { address: asset.assetGeneral.owner };
                this.lastSmartMeterReadWh = asset.assetGeneral.lastSmartMeterReadWh;
                this.active = asset.assetGeneral.active;
                this.lastSmartMeterReadFileHash = asset.assetGeneral.lastSmartMeterReadFileHash;
                this.matcher = [{ address: asset.assetGeneral.matcher }];
                this.propertiesDocumentHash = asset.assetGeneral.propertiesDocumentHash;
                this.url = asset.assetGeneral.url;
                this.initialized = true;
                this.offChainProperties = yield this.getOffChainProperties(this.propertiesDocumentHash);
                if (this.configuration.logger) {
                    this.configuration.logger.verbose(`Consuming asset ${this.id} synced`);
                }
            }
            return this;
        });
    }
    saveSmartMeterRead(newMeterReading, fileHash) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.configuration.blockchainProperties.activeUser.privateKey) {
                return this.configuration.blockchainProperties.consumingAssetLogicInstance.saveSmartMeterRead(this.id, newMeterReading, fileHash, { privateKey: this.configuration.blockchainProperties.activeUser.privateKey });
            }
            else {
                return this.configuration.blockchainProperties.consumingAssetLogicInstance.saveSmartMeterRead(this.id, newMeterReading, fileHash, { privateKey: this.configuration.blockchainProperties.activeUser.address });
            }
        });
    }
}
exports.Entity = Entity;
//# sourceMappingURL=ConsumingAsset.js.map