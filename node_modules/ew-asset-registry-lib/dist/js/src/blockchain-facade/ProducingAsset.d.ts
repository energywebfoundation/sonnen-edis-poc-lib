import * as GeneralLib from 'ew-utils-general-lib';
import * as Asset from './Asset';
import { TransactionReceipt } from 'web3/types';
/**
 * TODO: in generalLib
 */
export declare enum Type {
    Wind = 0,
    Solar = 1,
    RunRiverHydro = 2,
    BiomassGas = 3,
    Battery = 4
}
export declare enum Compliance {
    none = 0,
    IREC = 1,
    EEC = 2,
    TIGR = 3
}
export interface OnChainProperties extends Asset.OnChainProperties {
    maxOwnerChanges?: number;
    marketLookupAddress?: string;
    supplyId?: number;
    timeFrameFrom?: number;
    timeFrameTo?: number;
    averagePower?: number;
    baselinePower?: number;
    supplyIdSet?: boolean;
    certificateOwner?: string;
    powerProfileURL?: string;
}
export interface OffChainProperties extends Asset.OffChainProperties {
    assetType: Type;
    complianceRegistry: Compliance;
    otherGreenAttributes: string;
    typeOfPublicSupport: string;
}
export declare const getAssetListLength: (configuration: GeneralLib.Configuration.Entity) => Promise<number>;
export declare const getAllAssets: (configuration: GeneralLib.Configuration.Entity) => Promise<Entity[]>;
export declare const getAllAssetsOwnedBy: (owner: string, configuration: GeneralLib.Configuration.Entity) => Promise<Entity[]>;
export declare const createAsset: (assetPropertiesOnChain: OnChainProperties, assetPropertiesOffChain: OffChainProperties, configuration: GeneralLib.Configuration.Entity) => Promise<Entity>;
export declare class Entity extends Asset.Entity implements OnChainProperties {
    certificatesCreatedForWh: number;
    lastSmartMeterCO2OffsetRead: number;
    maxOwnerChanges: number;
    offChainProperties: OffChainProperties;
    marketLookupAddress: string;
    supplyId: number;
    timeFrameFrom: number;
    timeFrameTo: number;
    averagePower: number;
    baselinePower: number;
    supplyIdSet: boolean;
    certificateOwner: string;
    powerProfileURL: string;
    getUrl(): string;
    sync(): Promise<Entity>;
    saveSmartMeterRead(meterReading: number, filehash: string, timeFrameFrom: number, timeFrameTo: number, averagePower: number, baselinePower: number, powerProfileURL: string): Promise<TransactionReceipt>;
}
