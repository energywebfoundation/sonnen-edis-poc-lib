"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const web3_1 = __importDefault(require("web3"));
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const ew_asset_registry_contracts_1 = require("ew-asset-registry-contracts");
const migrateContracts_1 = require("../utils/migrateContracts");
const MarketContractLookup_1 = require("../wrappedContracts/MarketContractLookup");
const MarketDB_1 = require("../wrappedContracts/MarketDB");
const MarketLogic_1 = require("../wrappedContracts/MarketLogic");
const __1 = require("..");
describe('MarketContractLookup', () => {
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    let assetRegistryContract;
    let marketRegistryContract;
    let marketDB;
    let marketLogic;
    let isGanache;
    it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
        isGanache = true;
        const userContracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
        const userLogic = new ew_user_registry_contracts_1.UserLogic(web3, userContracts.UserLogic);
        yield userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });
        const userContractLookupAddr = userContracts.UserContractLookup;
        const assetContracts = yield ew_asset_registry_contracts_1.migrateAssetRegistryContracts(web3, userContractLookupAddr, privateKeyDeployment);
        const assetRegistryLookupAddr = assetContracts.AssetContractLookup;
        const marketContracts = yield migrateContracts_1.migrateMarketRegistryContracts(web3, assetRegistryLookupAddr, privateKeyDeployment);
        assetRegistryContract = new ew_asset_registry_contracts_1.AssetContractLookup(web3, assetRegistryLookupAddr);
        Object.keys(marketContracts).forEach((key) => __awaiter(this, void 0, void 0, function* () {
            let tempBytecode;
            if (key.includes('MarketContractLookup')) {
                marketRegistryContract = new MarketContractLookup_1.MarketContractLookup(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketContractLookupJSON.deployedBytecode;
            }
            if (key.includes('MarketLogic')) {
                marketLogic = new MarketLogic_1.MarketLogic(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketLogicJSON.deployedBytecode;
            }
            if (key.includes('MarketDB')) {
                marketDB = new MarketDB_1.MarketDB(web3, marketContracts[key]);
                tempBytecode = '0x' + __1.MarketDBJSON.deployedBytecode;
            }
            const deployedBytecode = yield web3.eth.getCode(marketContracts[key]);
            chai_1.assert.isTrue(deployedBytecode.length > 0);
            // const tempBytecode = '0x' + contractInfo.deployedBytecode;
            chai_1.assert.equal(deployedBytecode, tempBytecode);
        }));
    }));
    it('should have the right owner', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketRegistryContract.owner(), accountDeployment);
    }));
    it('should have the right registries', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield marketRegistryContract.marketLogicRegistry(), marketLogic.web3Contract._address);
        chai_1.assert.equal(yield marketRegistryContract.assetContractLookup(), assetRegistryContract.web3Contract._address);
    }));
    it('should fail when trying to call init again', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketRegistryContract.init('0x1000000000000000000000000000000000000005', '0x1000000000000000000000000000000000000005', '0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'already initialized');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should throw an error when calling update as non Owner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketRegistryContract.update('0x1000000000000000000000000000000000000005', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'msg.sender is not owner');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should be able to update as owner', () => __awaiter(this, void 0, void 0, function* () {
        yield marketRegistryContract.update('0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        chai_1.assert.equal(yield marketRegistryContract.marketLogicRegistry(), '0x1000000000000000000000000000000000000005');
        chai_1.assert.equal(yield marketDB.owner(), '0x1000000000000000000000000000000000000005');
    }));
    it('should throw when trying to change owner as non-owner', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield marketRegistryContract.changeOwner('0x1000000000000000000000000000000000000005', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'msg.sender is not owner');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should be able to change owner ', () => __awaiter(this, void 0, void 0, function* () {
        yield marketRegistryContract.changeOwner('0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        chai_1.assert.equal(yield marketRegistryContract.owner(), '0x1000000000000000000000000000000000000005');
    }));
});
//# sourceMappingURL=MarketContractLookup.js.map