"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Heiko Burkhardt, heiko.burkhardt@slock.it; Martin Kuechler, martin.kuchler@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const User_1 = require("../blockchain-facade/Users/User");
const Logger_1 = require("../blockchain-facade/Logger");
const web3_1 = __importDefault(require("web3"));
describe('UserLogic Facade', () => {
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    let userContractLookup;
    let userRegistry;
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    let conf;
    const user1PK = '0xfaab95e72c3ac39f7c060125d9eca3558758bb248d1a4cdc9c1b7fd3f91a4485';
    const user1 = web3.eth.accounts.privateKeyToAccount(user1PK).address;
    const user2PK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const user2 = web3.eth.accounts.privateKeyToAccount(user2PK).address;
    it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
        const contracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
        userContractLookup = new ew_user_registry_contracts_1.UserContractLookup(web3, contracts.UserContractLookup);
        userRegistry = new ew_user_registry_contracts_1.UserLogic(web3, yield userContractLookup.userRegistry());
        // const bytecodeUserContractLookup = await web3.eth.getCode(contracts.UserContractLookup);
        // assert.isTrue(bytecodeUserContractLookup.length > 0);
        // assert.equal(bytecodeUserContractLookup, '0x' + UserContractLookupJSON.bytecode);
    }));
    it('should create a user', () => __awaiter(this, void 0, void 0, function* () {
        const userProps = {
            id: user1,
            active: true,
            roles: 27,
            organization: 'Testorganization',
        };
        const userPropsOffchain = {
            firstName: 'John',
            surname: 'Doe',
            street: 'Evergreen Terrace',
            number: '101',
            zip: '14789',
            city: 'Shelbyville',
            country: 'US',
            state: 'FL',
        };
        conf = {
            blockchainProperties: {
                web3,
                userLogicInstance: userRegistry,
                activeUser: {
                    address: accountDeployment, privateKey: privateKeyDeployment,
                },
            },
            logger: Logger_1.logger,
        };
        const user = yield User_1.User.CREATE_USER(userProps, userPropsOffchain, conf);
        delete user.configuration;
        delete user.proofs;
        chai_1.assert.deepEqual({
            id: user1,
            organization: 'Testorganization',
            roles: 27,
            active: true,
        }, user);
    }));
    it('should return correct user', () => __awaiter(this, void 0, void 0, function* () {
        const user = yield (new User_1.User(user1, conf)).sync();
        delete user.configuration;
        chai_1.assert.deepEqual(user, {
            id: user1,
            proofs: [],
            organization: 'Testorganization',
            roles: 27,
            active: true,
        });
        const emptyAccount = yield (new User_1.User(user2, conf)).sync();
        delete emptyAccount.configuration;
        chai_1.assert.deepEqual(emptyAccount, {
            id: user2,
            proofs: [],
            organization: '',
            roles: 0,
            active: false,
        });
        const adminAccount = yield (new User_1.User(accountDeployment, conf)).sync();
        delete adminAccount.configuration;
        chai_1.assert.deepEqual(adminAccount, {
            id: accountDeployment,
            proofs: [],
            organization: '',
            roles: 1,
            active: false,
        });
    }));
});
//# sourceMappingURL=UserLogicFacade.js.map