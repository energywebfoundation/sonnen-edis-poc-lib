"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Heiko Burkhardt, heiko.burkhardt@slock.it; Martin Kuechler, martin.kuchler@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ew_utils_general_lib_1 = require("ew-utils-general-lib");
class User extends ew_utils_general_lib_1.BlockchainDataModelEntity.Entity {
    static CREATE_USER(userProperties, userPropertiesOffChain, configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            yield configuration.blockchainProperties.userLogicInstance.setUser(userProperties.id, userProperties.organization, {
                from: configuration.blockchainProperties.activeUser.address,
                privateKey: configuration.blockchainProperties.activeUser.privateKey,
            });
            yield configuration.blockchainProperties.userLogicInstance.setRoles(userProperties.id, userProperties.roles, {
                from: configuration.blockchainProperties.activeUser.address,
                privateKey: configuration.blockchainProperties.activeUser.privateKey,
            });
            if (configuration.logger) {
                configuration.logger.info(`User ${userProperties.id} synced`);
            }
            return (new User(userProperties.id, configuration)).sync();
        });
    }
    constructor(accountAddress, configuration) {
        super(accountAddress, configuration);
    }
    getUrl() {
        return "http://localhost:3000/";
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.id) {
                const userData = yield this.configuration.blockchainProperties.userLogicInstance.getFullUser(this.id);
                this.organization = userData._organization;
                this.roles = parseInt(userData._roles, 10);
                this.active = userData._active;
                if (this.configuration.logger) {
                    this.configuration.logger.verbose(`User ${this.id} synced`);
                }
            }
            return this;
        });
    }
}
exports.User = User;
//# sourceMappingURL=User.js.map