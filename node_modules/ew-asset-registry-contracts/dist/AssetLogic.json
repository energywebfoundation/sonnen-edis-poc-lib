{"abi":[{"constant":false,"inputs":[{"name":"_newLogic","type":"address"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastMeterReadingAndHash","outputs":[{"name":"_lastSmartMeterReadWh","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"userContractLookup","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_smartMeter","type":"address"}],"name":"checkAssetExist","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"db","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_new","type":"address"}],"name":"addMatcher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_marketContractLookup","type":"address"}],"name":"setMarketLookupContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_remove","type":"address"}],"name":"removeMatcher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetGeneral","outputs":[{"name":"smartMeter","type":"address"},{"name":"owner","type":"address"},{"name":"lastSmartMeterReadWh","type":"uint256"},{"name":"active","type":"bool"},{"name":"lastSmartMeterReadFileHash","type":"string"},{"name":"matcher","type":"address[]"},{"name":"propertiesDocumentHash","type":"string"},{"name":"url","type":"string"},{"name":"marketLookupContract","type":"address"},{"name":"bundled","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAssetListLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_role","type":"uint8"},{"name":"_caller","type":"address"}],"name":"isRole","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMarketLookupContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_active","type":"bool"}],"name":"setActive","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_dbAddress","type":"address"},{"name":"","type":"address"}],"name":"init","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMatcher","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_sender","type":"address"},{"indexed":true,"name":"_assetId","type":"uint256"}],"name":"LogAssetCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_assetId","type":"uint256"}],"name":"LogAssetFullyInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_assetId","type":"uint256"}],"name":"LogAssetSetActive","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_assetId","type":"uint256"}],"name":"LogAssetSetInactive","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_assetId","type":"uint256"},{"indexed":false,"name":"_oldMeterRead","type":"uint256"},{"indexed":false,"name":"_newMeterRead","type":"uint256"}],"name":"LogNewMeterRead","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_newOwner","type":"address"}],"name":"LogChangeOwner","type":"event"}],"bytecode":"","contractName":"AssetLogic","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it\n\npragma solidity ^0.5.0;\n\nimport \"ew-user-registry-contracts/contracts/Users/RoleManagement.sol\";\nimport \"ew-utils-general-contracts/contracts/Interfaces/Updatable.sol\";\nimport \"../../contracts/Interfaces/AssetDbInterface.sol\";\nimport \"../../contracts/Interfaces/AssetGeneralInterface.sol\";\nimport \"../../contracts/AssetContractLookup.sol\";\nimport \"../../contracts/Asset/AssetGeneralStructContract.sol\";\n\n/// @title Contract for storing the current logic-contracts-addresses for the certificate of origin\ncontract AssetLogic is RoleManagement, Updatable, AssetGeneralInterface, AssetGeneralStructContract {\n\n    event LogAssetCreated(address _sender, uint indexed _assetId);\n    event LogAssetFullyInitialized(uint indexed _assetId);\n    event LogAssetSetActive(uint indexed _assetId);\n    event LogAssetSetInactive(uint indexed _assetId);\n    event LogNewMeterRead(\n        uint indexed _assetId,\n        uint _oldMeterRead,\n        uint _newMeterRead\n    );\n\n    /**\n        abtract functions\n     */\n\n\t/// @notice checks whether an asset with the provided smartmeter aready exists\n\t/// @param _smartMeter provided smartmeter\n\t/// @return whether there is already an asset with that smartmeter\n    function checkAssetExist(address _smartMeter) public view returns (bool);\n\n\n    AssetDbInterface public db;\n\n    modifier isInitialized {\n        require(address(db) != address(0x0));\n        _;\n    }\n\n    /**\n        external functions\n    */\n\t/// @notice function toinizialize the database, can only be called once\n\t/// @param _dbAddress address of the database contract\n    function init(address _dbAddress, address )\n        external\n        onlyOwner\n    {\n        require(address(db) == address(0x0));\n        db = AssetDbInterface(_dbAddress);\n    }\n\n\t/// @notice Sets active to false\n\t/// @param _assetId The id belonging to an entry in the asset registry\n\t/// @param _active flag if the asset is asset or not\n    function setActive(uint _assetId, bool _active)\n        external\n        isInitialized\n        onlyRole(RoleManagement.Role.AssetAdmin)\n    {\n\n        db.setActive(_assetId, _active);\n        if (_active) {\n            emit LogAssetSetActive(_assetId);\n        } else {\n            emit LogAssetSetInactive(_assetId);\n        }\n    }\n\n\t/// @notice Set the MarketLookup contract contract\n\t/// @param _assetId the id belonging ti an entry in the asset registry\n\t/// @param _marketContractLookup the MarketLookup-contract\n    function setMarketLookupContract(uint _assetId, address _marketContractLookup)\n        external\n    {\n        require(msg.sender == db.getAssetOwner(_assetId),\"sender is not the assetOwner\");\n        db.setMarketLookupContract(_assetId, _marketContractLookup);\n    }\n\n\t/// @notice Updates the logic contract\n\t/// @param _newLogic address of the new logic contract\n    function update(address _newLogic)\n        external\n        onlyOwner\n    {\n        Owned(address(db)).changeOwner(_newLogic);\n    }\n\n\t/// @notice gets the amount of all assets\n\t/// @dev needed to iterate though all the asset\n\t/// @return the amount of all assets\n    function getAssetListLength()\n        external\n        view\n        returns (uint)\n    {\n       return db.getAssetListLength();\n    }\n\n\t/// @notice gets the MarketLookup-contract\n\t/// @param _assetId the id of an asset\n\t/// @return contract address of the MarketLookup-contract\n    function getMarketLookupContract(uint _assetId)\n        external\n        view\n        returns (address)\n    {\n        return db.getMarketLookupContract(_assetId);\n    }\n\n\t/// @notice gets the matcher-array\n\t/// @param _assetId the id of an asset\n\t/// @return array with matcher-addresses\n    function getMatcher(uint _assetId)\n        external\n        view\n        returns(address[] memory)\n    {\n        return db.getMatcher(_assetId);\n    }\n\n\t/// @notice adds a new matcher-address to the matcher-array of an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _new matcher-address to be included\n    function addMatcher(uint _assetId, address _new) external {\n\n        require(msg.sender == db.getAssetOwner(_assetId),\"addMatcher: not the owner\");\n        address[] memory matcher = db.getMatcher(_assetId);\n        assert(matcher.length < matcher.length + 1);\n        require(matcher.length+1 <= AssetContractLookup(owner).maxMatcherPerAsset(),\"addMatcher: too many matcher already\");\n\n        db.addMatcher(_assetId,_new);\n    }\n\n\t/// @notice removes a matcher address from the array of an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _remove matcher address to be removed\n    function removeMatcher(uint _assetId, address _remove) external  {\n        require(msg.sender == db.getAssetOwner(_assetId),\"removeMatcher: not the owner\");\n        require(db.removeMatcherExternal(_assetId,_remove),\"removeMatcher: address not found\");\n\n    }\n\t/// @notice checks whether an AssetGeneral-struct already exists\n\t/// @param _assetGeneral the AssetGeneral-struct\n\t/// @return whether that struct exists\n    function checkAssetGeneralExistingStatus(AssetGeneralStructContract.AssetGeneral memory _assetGeneral) internal pure returns (bool) {\n        return !(\n            address(_assetGeneral.smartMeter) == address(0x0)\n            && address(_assetGeneral.owner) == address(0x0)\n            && _assetGeneral.lastSmartMeterReadWh == 0\n            && !_assetGeneral.active\n            && bytes(_assetGeneral.lastSmartMeterReadFileHash).length == 0\n            && _assetGeneral.matcher.length == 0\n            && bytes(_assetGeneral.propertiesDocumentHash).length == 0\n            && bytes(_assetGeneral.url).length == 0\n            && address(_assetGeneral.marketLookupContract) == address(0x0)\n        );\n    }\n\n\t/// @notice sets a new meterreading for an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _newMeterRead the new meterreading in Wh\n\t/// @param _smartMeterReadFileHash the filehash for the meterreading\n    function setSmartMeterReadInternal(\n        uint _assetId,\n        uint _newMeterRead,\n        string memory _smartMeterReadFileHash\n    ) internal returns (uint){\n\n        AssetGeneralStructContract.AssetGeneral memory asset = db.getAssetGeneral(_assetId);\n        require(asset.smartMeter == msg.sender,\"saveSmartMeterRead: wrong sender\");\n        require(asset.active,\"saveSmartMeterRead: asset not active\");\n\n        uint oldMeterRead = asset.lastSmartMeterReadWh;\n\n        require(_newMeterRead > oldMeterRead,\"saveSmartMeterRead: meterread too low\");\n        /// @dev need to check if new meter read is higher then the old one\n\n        db.setSmartMeterRead(_assetId, _newMeterRead, _smartMeterReadFileHash);\n\n        emit LogNewMeterRead(\n            _assetId,\n            oldMeterRead,\n            _newMeterRead\n        );\n\n        return (_newMeterRead-oldMeterRead);\n    }\n\n\t/// @notice gets the general information of an asset\n\t/// @param _assetId the id of an asset\n\t/// @return the AssetGeneral-Stuct as separate returnvalues\n    function getAssetGeneral(uint _assetId) external view returns (\n        address smartMeter,\n        address owner,\n        uint lastSmartMeterReadWh,\n        bool active,\n        string memory lastSmartMeterReadFileHash,\n        address[] memory matcher,\n        string memory propertiesDocumentHash,\n        string memory url,\n        address marketLookupContract,\n        bool bundled\n    )\n    {\n        AssetGeneral memory a = db.getAssetGeneral(_assetId);\n\n        smartMeter = a.smartMeter;\n        owner = a.owner;\n        lastSmartMeterReadWh = a.lastSmartMeterReadWh;\n        active = a.active;\n        lastSmartMeterReadFileHash = a.lastSmartMeterReadFileHash;\n        matcher = a.matcher;\n        propertiesDocumentHash = a.propertiesDocumentHash;\n        url = a.url;\n        marketLookupContract = a.marketLookupContract;\n        bundled = a.bundled;\n    }\n\n\t/// @notice gets the owner-address of an asset\n\t/// @param _assetId the id of an asset\n\t/// @return the owner of that asset\n    function getAssetOwner(uint _assetId) external view returns (address){\n        return db.getAssetGeneral(_assetId).owner;\n    }\n\n\t/// @notice gets the last meterreading and its hash\n\t/// @param _assetId the id of an asset\n\t/// @return the last meterreading and its hash\n    function getLastMeterReadingAndHash(uint _assetId) external view returns (uint _lastSmartMeterReadWh, string memory _lastSmartMeterReadFileHash)\n    {\n        return db.getLastMeterReadingAndHash(_assetId);\n    }\n\n\t/// @notice runs some checks before creating an asset\n\t/// @param _matcher the matcher array\n\t/// @param _owner the address of the asset-owner\n\t/// @param _smartMeter the smartmeter used by that asset\n    function checkBeforeCreation(address[] memory _matcher, address _owner, address _smartMeter) internal view {\n        require(_matcher.length <= AssetContractLookup(owner).maxMatcherPerAsset(),\"addMatcher: too many matcher already\");\n        require(isRole(RoleManagement.Role.AssetManager, _owner),\"user does not have the required role\");\n        require(isRole(RoleManagement.Role.AssetAdmin, msg.sender),\"user does not have the required role\");\n        require(!checkAssetExist(_smartMeter),\"smartmeter does already exist\");\n    }\n\n}\n","networks":"{}"}