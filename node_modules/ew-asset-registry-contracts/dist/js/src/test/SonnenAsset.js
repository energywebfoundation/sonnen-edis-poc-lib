"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const web3_1 = __importDefault(require("web3"));
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const migrateContracts_1 = require("../utils/migrateContracts");
const AssetContractLookup_1 = require("../wrappedContracts/AssetContractLookup");
const AssetConsumingRegistryLogic_1 = require("../wrappedContracts/AssetConsumingRegistryLogic");
const SonnenProducingAssetLogic_1 = require("../wrappedContracts/SonnenProducingAssetLogic");
const AssetConsumingDB_1 = require("../wrappedContracts/AssetConsumingDB");
const SonnenAssetProducingDB_1 = require("../wrappedContracts/SonnenAssetProducingDB");
const __1 = require("..");
describe('SonnenAsset', () => {
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    let userLogic;
    let userContractLookup;
    let assetContractLookup;
    let assetProducingLogic;
    let assetConsumingLogic;
    let assetProducingDB;
    let assetConsumingDB;
    const assetOwnerPK = '0xfaab95e72c3ac39f7c060125d9eca3558758bb248d1a4cdc9c1b7fd3f91a4485';
    const assetOwnerAddress = web3.eth.accounts.privateKeyToAccount(assetOwnerPK).address;
    const assetSmartmeterPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const assetSmartmeter = web3.eth.accounts.privateKeyToAccount(assetSmartmeterPK).address;
    const matcherPK = '0xc118b0425221384fe0cbbd093b2a81b1b65d0330810e0792c7059e518cea5383';
    const matcher = web3.eth.accounts.privateKeyToAccount(matcherPK).address;
    const assetSmartmeter2PK = '0x554f3c1470e9f66ed2cf1dc260d2f4de77a816af2883679b1dc68c551e8fa5ed';
    const assetSmartMeter2 = web3.eth.accounts.privateKeyToAccount(assetSmartmeter2PK).address;
    it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
        const userContracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
        userLogic = new ew_user_registry_contracts_1.UserLogic(web3, userContracts.UserLogic);
        yield userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });
        const userContractLookupAddr = userContracts.UserContractLookup;
        const deployedContracts = yield migrateContracts_1.migrateSonnenAssetRegistryContracts(web3, userContractLookupAddr, privateKeyDeployment);
        userContractLookup = new ew_user_registry_contracts_1.UserContractLookup(web3, userContractLookupAddr);
        Object.keys(deployedContracts).forEach((key) => __awaiter(this, void 0, void 0, function* () {
            let tempBytecode;
            if (key.includes('AssetContractLookup')) {
                assetContractLookup = new AssetContractLookup_1.AssetContractLookup(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetContractLookupJSON.deployedBytecode;
            }
            if (key.includes('AssetConsumingDB')) {
                assetConsumingDB = new AssetConsumingDB_1.AssetConsumingDB(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetConsumingDBJSON.deployedBytecode;
            }
            if (key.includes('AssetConsumingRegistryLogic')) {
                assetConsumingLogic = new AssetConsumingRegistryLogic_1.AssetConsumingRegistryLogic(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetConsumingRegistryLogicJSON.deployedBytecode;
            }
            if (key.includes('AssetProducingDB')) {
                assetProducingDB = new SonnenAssetProducingDB_1.SonnenAssetProducingDB(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.SonnenAssetProducingDBJSON.deployedBytecode;
            }
            if (key.includes('AssetProducingRegistryLogic')) {
                assetProducingLogic = new SonnenProducingAssetLogic_1.SonnenProducingAssetLogic(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.SonnenAssetProducingRegistryLogicJSON.deployedBytecode;
            }
            const deployedBytecode = yield web3.eth.getCode(deployedContracts[key]);
            chai_1.assert.isTrue(deployedBytecode.length > 0);
            // const tempBytecode = '0x' + contractInfo.deployedBytecode;
            chai_1.assert.equal(deployedBytecode, tempBytecode);
        }));
    }));
    it('should have the right owner', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetProducingLogic.owner(), assetContractLookup.web3Contract._address);
    }));
    it('should have the right userContractLookup', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetProducingLogic.userContractLookup(), userContractLookup.web3Contract._address);
    }));
    it('should have the right userContractLookup', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetProducingLogic.db(), assetProducingDB.web3Contract._address);
    }));
    it('should not have any assets in the contract after deployment', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetProducingLogic.getAssetListLength(), 0);
    }));
    it('should onboard tests-users', () => __awaiter(this, void 0, void 0, function* () {
        const userLogicAddress = yield userContractLookup.userRegistry();
        //  userLogic = new UserLogic(web3, userLogicAddress);
        yield userLogic.setUser(assetOwnerAddress, 'assetOwner', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(assetOwnerAddress, 8, { privateKey: privateKeyDeployment });
    }));
    it('should onboard a new asset', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield assetProducingLogic.createSonnenAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'url', 2, '0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        const event = (yield assetProducingLogic.getAllLogAssetCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
        chai_1.assert.equal(event.event, 'LogAssetCreated');
        chai_1.assert.deepEqual(event.returnValues, {
            0: accountDeployment,
            1: '0',
            _sender: accountDeployment,
            _assetId: '0',
        });
        console.log(yield assetProducingLogic.getSonnenAssetById(0));
    }));
    it('should fail onboarding same asset again', () => __awaiter(this, void 0, void 0, function* () {
        try {
            const tx = yield assetProducingLogic.createSonnenAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'url', 2, '0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        }
        catch (e) {
            console.log(e);
        }
    }));
    it('should fail when calling the regular savesmartmeter read', () => __awaiter(this, void 0, void 0, function* () {
        try {
            const tx = yield assetProducingLogic.saveSmartMeterRead(0, 100, 'lastSmartMeterReadFileHash', { privateKey: assetSmartmeterPK });
        }
        catch (e) {
            console.log(e);
        }
    }));
    it('should log with the special meterread-functuion', () => __awaiter(this, void 0, void 0, function* () {
        console.log(yield assetProducingLogic.getSonnenAssetById(0));
        console.log(web3.eth.accounts.privateKeyToAccount(assetSmartmeterPK));
        const tx = yield assetProducingLogic.saveSonnenSmartMeterRead(0, 100, 'lastSmartMeterReadFileHash', Date.now() - 1000, Date.now(), 10, 10, 'url', { privateKey: assetSmartmeterPK });
        console.log(yield assetProducingLogic.getSonnenAssetById(0));
    }));
});
//# sourceMappingURL=SonnenAsset.js.map