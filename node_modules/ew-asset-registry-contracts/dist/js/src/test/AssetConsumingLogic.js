"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
require("mocha");
const web3_1 = __importDefault(require("web3"));
const ew_user_registry_contracts_1 = require("ew-user-registry-contracts");
const migrateContracts_1 = require("../utils/migrateContracts");
const AssetContractLookup_1 = require("../wrappedContracts/AssetContractLookup");
const AssetProducingRegistryLogic_1 = require("../wrappedContracts/AssetProducingRegistryLogic");
const AssetConsumingRegistryLogic_1 = require("../wrappedContracts/AssetConsumingRegistryLogic");
const AssetConsumingDB_1 = require("../wrappedContracts/AssetConsumingDB");
const AssetProducingDB_1 = require("../wrappedContracts/AssetProducingDB");
const __1 = require("..");
describe.skip('AssetConsumingLogic', () => {
    const configFile = JSON.parse(fs.readFileSync(process.cwd() + '/connection-config.json', 'utf8'));
    const web3 = new web3_1.default(configFile.develop.web3);
    const privateKeyDeployment = configFile.develop.deployKey.startsWith('0x') ?
        configFile.develop.deployKey : '0x' + configFile.develop.deployKey;
    const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
    let userLogic;
    let userContractLookup;
    let assetContractLookup;
    let assetProducingLogic;
    let assetConsumingLogic;
    let assetProducingDB;
    let assetConsumingDB;
    const assetOwnerPK = '0xfaab95e72c3ac39f7c060125d9eca3558758bb248d1a4cdc9c1b7fd3f91a4485';
    const assetOwnerAddress = web3.eth.accounts.privateKeyToAccount(assetOwnerPK).address;
    const assetSmartmeterPK = '0x2dc5120c26df339dbd9861a0f39a79d87e0638d30fdedc938861beac77bbd3f5';
    const assetSmartmeter = web3.eth.accounts.privateKeyToAccount(assetSmartmeterPK).address;
    const matcherPK = '0xc118b0425221384fe0cbbd093b2a81b1b65d0330810e0792c7059e518cea5383';
    const matcher = web3.eth.accounts.privateKeyToAccount(matcherPK).address;
    const assetSmartmeter2PK = '0x554f3c1470e9f66ed2cf1dc260d2f4de77a816af2883679b1dc68c551e8fa5ed';
    const assetSmartMeter2 = web3.eth.accounts.privateKeyToAccount(assetSmartmeter2PK).address;
    it('should deploy the contracts', () => __awaiter(this, void 0, void 0, function* () {
        const userContracts = yield ew_user_registry_contracts_1.migrateUserRegistryContracts(web3, privateKeyDeployment);
        userLogic = new ew_user_registry_contracts_1.UserLogic(web3, userContracts.UserLogic);
        yield userLogic.setUser(accountDeployment, 'admin', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(accountDeployment, 3, { privateKey: privateKeyDeployment });
        const userContractLookupAddr = userContracts.UserContractLookup;
        const deployedContracts = yield migrateContracts_1.migrateAssetRegistryContracts(web3, userContractLookupAddr, privateKeyDeployment);
        userContractLookup = new ew_user_registry_contracts_1.UserContractLookup(web3, userContractLookupAddr);
        Object.keys(deployedContracts).forEach((key) => __awaiter(this, void 0, void 0, function* () {
            let tempBytecode;
            if (key.includes('AssetContractLookup')) {
                assetContractLookup = new AssetContractLookup_1.AssetContractLookup(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetContractLookupJSON.deployedBytecode;
            }
            if (key.includes('AssetConsumingDB')) {
                assetConsumingDB = new AssetConsumingDB_1.AssetConsumingDB(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetConsumingDBJSON.deployedBytecode;
            }
            if (key.includes('AssetConsumingRegistryLogic')) {
                assetConsumingLogic = new AssetConsumingRegistryLogic_1.AssetConsumingRegistryLogic(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetConsumingRegistryLogicJSON.deployedBytecode;
            }
            if (key.includes('AssetProducingDB')) {
                assetProducingDB = new AssetProducingDB_1.AssetProducingDB(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetProducingDBJSON.deployedBytecode;
            }
            if (key.includes('AssetProducingRegistryLogic')) {
                assetProducingLogic = new AssetProducingRegistryLogic_1.AssetProducingRegistryLogic(web3, deployedContracts[key]);
                tempBytecode = '0x' + __1.AssetProducingRegistryLogicJSON.deployedBytecode;
            }
            const deployedBytecode = yield web3.eth.getCode(deployedContracts[key]);
            chai_1.assert.isTrue(deployedBytecode.length > 0);
            // const tempBytecode = '0x' + contractInfo.deployedBytecode;
            chai_1.assert.equal(deployedBytecode, tempBytecode);
        }));
    }));
    it('should have the right owner', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.owner(), assetContractLookup.web3Contract._address);
    }));
    it('should have the right userContractLookup', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.userContractLookup(), userContractLookup.web3Contract._address);
    }));
    it('should have the right db', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.db(), assetConsumingDB.web3Contract._address);
    }));
    it('should not have any assets in the contract after deployment', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.getAssetListLength(), 0);
    }));
    it('should not deploy an asset when the user does not have the assetManager rights as assetManager', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'urlString', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'user does not have the required role');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should not deploy an asset when the user does not have the assetManager rights as user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'urlString', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'user does not have the required role');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should onboard tests-users', () => __awaiter(this, void 0, void 0, function* () {
        const userLogicAddress = yield userContractLookup.userRegistry();
        yield userLogic.setUser(assetOwnerAddress, 'assetOwner', { privateKey: privateKeyDeployment });
        yield userLogic.setRoles(assetOwnerAddress, 8, { privateKey: privateKeyDeployment });
    }));
    it('should not deploy an asset as user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'urlString', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'user does not have the required role');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should return empty asset', () => __awaiter(this, void 0, void 0, function* () {
        const emptyAsset = yield assetConsumingLogic.getAssetBySmartMeter(assetSmartmeter);
        // all the properties are in 1 struct
        chai_1.assert.equal(emptyAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(emptyAsset.assetGeneral.length, 10);
        const ag = emptyAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, '0x0000000000000000000000000000000000000000');
        chai_1.assert.equal(ag.owner, '0x0000000000000000000000000000000000000000');
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 0);
        chai_1.assert.isFalse(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, '');
        chai_1.assert.deepEqual(ag.matcher, []);
        chai_1.assert.equal(ag.propertiesDocumentHash, '');
        chai_1.assert.equal(ag.url, '');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should onboard a new asset', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'urlString', { privateKey: privateKeyDeployment });
        const event = (yield assetConsumingLogic.getAllLogAssetCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
        chai_1.assert.equal(event.event, 'LogAssetCreated');
        chai_1.assert.deepEqual(event.returnValues, {
            0: accountDeployment,
            1: '0',
            _sender: accountDeployment,
            _assetId: '0',
        });
    }));
    it('should fail when trying to onboard a new asset with same smartmeter', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [matcher], 'propertiesDocumentHash', 'urlString', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'smartmeter does already exist');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should have 1 asset in the list', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.getAssetListLength(), 1);
    }));
    it('should return asset by smartmeter', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetBySmartMeter(assetSmartmeter);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 0);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, '');
        chai_1.assert.deepEqual(ag.matcher, [matcher]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should return the deployed asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 0);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, '');
        chai_1.assert.deepEqual(ag.matcher, [matcher]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should fail when trying to log with the wrong smartmeter', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.saveSmartMeterRead(0, 100, 'newMeterReadFileHash', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'saveSmartMeterRead: wrong sender');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should be able to log new meterread with the right account', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield assetConsumingLogic.saveSmartMeterRead(0, 100, 'newMeterReadFileHash', { privateKey: assetSmartmeterPK });
        const event = (yield assetConsumingLogic.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
        chai_1.assert.equal(event.event, 'LogNewMeterRead');
        chai_1.assert.deepEqual(event.returnValues, {
            0: '0',
            1: '0',
            2: '100',
            _assetId: '0',
            _oldMeterRead: '0',
            _newMeterRead: '100',
        });
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 100);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, [matcher]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should fail when trying to log with a too low new meterreading', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            const tx = yield assetConsumingLogic.saveSmartMeterRead(0, 100, 'newMeterReadFileHash', { privateKey: assetSmartmeterPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'saveSmartMeterRead: meterread too low');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should log with a new meterreading', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield assetConsumingLogic.saveSmartMeterRead(0, 200, 'newMeterReadFileHash', { privateKey: assetSmartmeterPK });
        const event = (yield assetConsumingLogic.getAllLogNewMeterReadEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
        chai_1.assert.equal(event.event, 'LogNewMeterRead');
        chai_1.assert.deepEqual(event.returnValues, {
            0: '0',
            1: '100',
            2: '200',
            _assetId: '0',
            _oldMeterRead: '100',
            _newMeterRead: '200',
        });
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, [matcher]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should return 0x0 when an asset does not have a marketLogicContractLookup-address set', () => __awaiter(this, void 0, void 0, function* () {
        chai_1.assert.equal(yield assetConsumingLogic.getMarketLookupContract(0), '0x0000000000000000000000000000000000000000');
    }));
    it('should fail trying to set marketAddress as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.setMarketLookupContract(0, '0x1000000000000000000000000000000000000005', { privateKey: '0x191c4b074672d9eda0ce576cfac79e44e320ffef5e3aadd55e000de57341d36c' });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'sender is not the assetOwner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail trying to set marketAddress as random user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.setMarketLookupContract(0, '0x1000000000000000000000000000000000000005', { privateKey: matcherPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'sender is not the assetOwner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should fail trying to set marketAddress as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.setMarketLookupContract(0, '0x1000000000000000000000000000000000000005', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'sender is not the assetOwner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should set marketAddress', () => __awaiter(this, void 0, void 0, function* () {
        yield assetConsumingLogic.setMarketLookupContract(0, '0x1000000000000000000000000000000000000005', { privateKey: assetOwnerPK });
        chai_1.assert.equal(yield assetConsumingLogic.getMarketLookupContract(0), '0x1000000000000000000000000000000000000005');
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, [matcher]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x1000000000000000000000000000000000000005');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should not add a matcher as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.addMatcher(0, '0x1000000000000000000000000000000000000000', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'addMatcher: not the owner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should not add a matcher as random user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.addMatcher(0, '0x1000000000000000000000000000000000000000', { privateKey: matcherPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'addMatcher: not the owner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should add a matcher', () => __awaiter(this, void 0, void 0, function* () {
        yield assetConsumingLogic.addMatcher(0, '0x1000000000000000000000000000000000000000', { privateKey: assetOwnerPK });
        const matcherArray = (yield assetConsumingLogic.getMatcher(0));
        chai_1.assert.deepEqual(matcherArray, [matcher, '0x1000000000000000000000000000000000000000']);
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, [matcher, '0x1000000000000000000000000000000000000000']);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x1000000000000000000000000000000000000005');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should not remove a matcher as admin', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.removeMatcher(0, matcher, { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'removeMatcher: not the owner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should not remove a matcher as random user', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.removeMatcher(0, matcher, { privateKey: matcherPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'removeMatcher: not the owner');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should remove a matcher', () => __awaiter(this, void 0, void 0, function* () {
        yield assetConsumingLogic.removeMatcher(0, matcher, { privateKey: assetOwnerPK });
        const matcherArray = (yield assetConsumingLogic.getMatcher(0));
        chai_1.assert.deepEqual(matcherArray, ['0x1000000000000000000000000000000000000000']);
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, ['0x1000000000000000000000000000000000000000']);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x1000000000000000000000000000000000000005');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should not remove a non existing-matcher', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.removeMatcher(0, matcher, { privateKey: assetOwnerPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'removeMatcher: address not found');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should remove remaining matcher', () => __awaiter(this, void 0, void 0, function* () {
        yield assetConsumingLogic.removeMatcher(0, '0x1000000000000000000000000000000000000000', { privateKey: assetOwnerPK });
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, []);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x1000000000000000000000000000000000000005');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should add more matcher', () => __awaiter(this, void 0, void 0, function* () {
        for (let i = 0; i < 10; i++) {
            yield assetConsumingLogic.addMatcher(0, '0x100000000000000000000000000000000000000' + i, { privateKey: assetOwnerPK });
        }
        const matcherArray = (yield assetConsumingLogic.getMatcher(0));
        chai_1.assert.deepEqual(matcherArray, [
            '0x1000000000000000000000000000000000000000',
            '0x1000000000000000000000000000000000000001',
            '0x1000000000000000000000000000000000000002',
            '0x1000000000000000000000000000000000000003',
            '0x1000000000000000000000000000000000000004',
            '0x1000000000000000000000000000000000000005',
            '0x1000000000000000000000000000000000000006',
            '0x1000000000000000000000000000000000000007',
            '0x1000000000000000000000000000000000000008',
            '0x1000000000000000000000000000000000000009'
        ]);
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(0);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartmeter);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 200);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, 'newMeterReadFileHash');
        chai_1.assert.deepEqual(ag.matcher, [
            '0x1000000000000000000000000000000000000000',
            '0x1000000000000000000000000000000000000001',
            '0x1000000000000000000000000000000000000002',
            '0x1000000000000000000000000000000000000003',
            '0x1000000000000000000000000000000000000004',
            '0x1000000000000000000000000000000000000005',
            '0x1000000000000000000000000000000000000006',
            '0x1000000000000000000000000000000000000007',
            '0x1000000000000000000000000000000000000008',
            '0x1000000000000000000000000000000000000009'
        ]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash');
        chai_1.assert.equal(ag.url, 'urlString');
        chai_1.assert.equal(ag.marketLookupContract, '0x1000000000000000000000000000000000000005');
        chai_1.assert.isFalse(ag.bundled);
    }));
    it('should not add a 10th matcher', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.addMatcher(0, '0x1000000000000000000000000000000000000010', { privateKey: assetOwnerPK });
        }
        catch (ex) {
            chai_1.assert.include(ex.message, 'addMatcher: too many matcher already');
            failed = true;
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should remove all 10 matcher', () => __awaiter(this, void 0, void 0, function* () {
        for (let i = 9; i >= 0; i--) {
            yield assetConsumingLogic.removeMatcher(0, '0x100000000000000000000000000000000000000' + i, { privateKey: assetOwnerPK });
        }
        const matcherArray = (yield assetConsumingLogic.getMatcher(0));
        chai_1.assert.deepEqual(matcherArray, []);
    }));
    it('should not onboard assets with too many matcher', () => __awaiter(this, void 0, void 0, function* () {
        let failed = false;
        try {
            yield assetConsumingLogic.createAsset(assetSmartmeter, assetOwnerAddress, true, [
                '0x1000000000000000000000000000000000000000',
                '0x1000000000000000000000000000000000000001',
                '0x1000000000000000000000000000000000000002',
                '0x1000000000000000000000000000000000000003',
                '0x1000000000000000000000000000000000000004',
                '0x1000000000000000000000000000000000000005',
                '0x1000000000000000000000000000000000000006',
                '0x1000000000000000000000000000000000000007',
                '0x1000000000000000000000000000000000000008',
                '0x1000000000000000000000000000000000000009',
                '0x1000000000000000000000000000000000000010'
            ], 'propertiesDocumentHash', 'urlString', { privateKey: privateKeyDeployment });
        }
        catch (ex) {
            failed = true;
            chai_1.assert.include(ex.message, 'addMatcher: too many matcher already');
        }
        chai_1.assert.isTrue(failed);
    }));
    it('should onboard assets with 10 matcher', () => __awaiter(this, void 0, void 0, function* () {
        const tx = yield assetConsumingLogic.createAsset(assetSmartMeter2, assetOwnerAddress, true, [
            '0x1000000000000000000000000000000000000000',
            '0x1000000000000000000000000000000000000001',
            '0x1000000000000000000000000000000000000002',
            '0x1000000000000000000000000000000000000003',
            '0x1000000000000000000000000000000000000004',
            '0x1000000000000000000000000000000000000005',
            '0x1000000000000000000000000000000000000006',
            '0x1000000000000000000000000000000000000007',
            '0x1000000000000000000000000000000000000008',
            '0x1000000000000000000000000000000000000009'
        ], 'propertiesDocumentHash#2', 'urlString#2', { privateKey: privateKeyDeployment });
        const event = (yield assetConsumingLogic.getAllLogAssetCreatedEvents({ fromBlock: tx.blockNumber, toBlock: tx.blockNumber }))[0];
        chai_1.assert.equal(event.event, 'LogAssetCreated');
        chai_1.assert.deepEqual(event.returnValues, {
            0: accountDeployment,
            1: '1',
            _sender: accountDeployment,
            _assetId: '1',
        });
    }));
    it('should return the updated asset correctly', () => __awaiter(this, void 0, void 0, function* () {
        const deployedAsset = yield assetConsumingLogic.getAssetById(1);
        // all the properties are in 1 struct
        chai_1.assert.equal(deployedAsset.length, 1);
        // checking the number of properties in assetGeneral
        chai_1.assert.equal(deployedAsset.assetGeneral.length, 10);
        const ag = deployedAsset.assetGeneral;
        chai_1.assert.equal(ag.smartMeter, assetSmartMeter2);
        chai_1.assert.equal(ag.owner, assetOwnerAddress);
        chai_1.assert.equal(ag.lastSmartMeterReadWh, 0);
        chai_1.assert.isTrue(ag.active);
        chai_1.assert.equal(ag.lastSmartMeterReadFileHash, '');
        chai_1.assert.deepEqual(ag.matcher, [
            '0x1000000000000000000000000000000000000000',
            '0x1000000000000000000000000000000000000001',
            '0x1000000000000000000000000000000000000002',
            '0x1000000000000000000000000000000000000003',
            '0x1000000000000000000000000000000000000004',
            '0x1000000000000000000000000000000000000005',
            '0x1000000000000000000000000000000000000006',
            '0x1000000000000000000000000000000000000007',
            '0x1000000000000000000000000000000000000008',
            '0x1000000000000000000000000000000000000009'
        ]);
        chai_1.assert.equal(ag.propertiesDocumentHash, 'propertiesDocumentHash#2');
        chai_1.assert.equal(ag.url, 'urlString#2');
        chai_1.assert.equal(ag.marketLookupContract, '0x0000000000000000000000000000000000000000');
        chai_1.assert.isFalse(ag.bundled);
    }));
});
//# sourceMappingURL=AssetConsumingLogic.js.map