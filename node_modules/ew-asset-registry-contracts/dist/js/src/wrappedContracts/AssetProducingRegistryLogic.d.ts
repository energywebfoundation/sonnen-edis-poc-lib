import { GeneralFunctions, SpecialTx, SearchLog } from './GeneralFunctions';
import Web3 = require('web3');
export declare class AssetProducingRegistryLogic extends GeneralFunctions {
    web3: Web3;
    buildFile: {
        "abi": ({
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "constant": boolean;
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "outputs": {
                "components": ({
                    "components": {
                        "name": string;
                        "type": string;
                    }[];
                    "name": string;
                    "type": string;
                } | {
                    "name": string;
                    "type": string;
                    "components"?: undefined;
                })[];
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "anonymous"?: undefined;
        } | {
            "inputs": {
                "name": string;
                "type": string;
            }[];
            "payable": boolean;
            "stateMutability": string;
            "type": string;
            "constant"?: undefined;
            "name"?: undefined;
            "outputs"?: undefined;
            "anonymous"?: undefined;
        } | {
            "anonymous": boolean;
            "inputs": {
                "indexed": boolean;
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
            "constant"?: undefined;
            "outputs"?: undefined;
            "payable"?: undefined;
            "stateMutability"?: undefined;
        })[];
        "bytecode": string;
        "contractName": string;
        "deployedBytecode": string;
        "source": string;
        "networks": string;
    };
    constructor(web3: Web3, address?: string);
    getAllLogNewMeterReadEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogAssetCreatedEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogAssetFullyInitializedEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogAssetSetActiveEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogAssetSetInactiveEvents(eventFilter?: SearchLog): Promise<any>;
    getAllLogChangeOwnerEvents(eventFilter?: SearchLog): Promise<any>;
    getAllEvents(eventFilter?: SearchLog): Promise<any>;
    update(_newLogic: string, txParams?: SpecialTx): Promise<any>;
    getLastMeterReadingAndHash(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getAssetBySmartMeter(_smartMeter: string, txParams?: SpecialTx): Promise<any>;
    userContractLookup(txParams?: SpecialTx): Promise<any>;
    checkAssetExist(_smartMeter: string, txParams?: SpecialTx): Promise<any>;
    db(txParams?: SpecialTx): Promise<any>;
    addMatcher(_assetId: number, _new: string, txParams?: SpecialTx): Promise<any>;
    createAsset(_smartMeter: string, _owner: string, _active: boolean, _matcher: string[], _propertiesDocumentHash: string, _url: string, _numOwnerChanges: number, txParams?: SpecialTx): Promise<any>;
    setMarketLookupContract(_assetId: number, _marketContractLookup: string, txParams?: SpecialTx): Promise<any>;
    getAssetOwner(_assetId: number, txParams?: SpecialTx): Promise<any>;
    owner(txParams?: SpecialTx): Promise<any>;
    changeOwner(_newOwner: string, txParams?: SpecialTx): Promise<any>;
    checkAssetExistExternal(_smartMeter: string, txParams?: SpecialTx): Promise<any>;
    setBundleActive(_assetId: number, _active: boolean, txParams?: SpecialTx): Promise<any>;
    saveSmartMeterRead(_assetId: number, _newMeterRead: number, _lastSmartMeterReadFileHash: string, txParams?: SpecialTx): Promise<any>;
    removeMatcher(_assetId: number, _remove: string, txParams?: SpecialTx): Promise<any>;
    getAssetGeneral(_assetId: number, txParams?: SpecialTx): Promise<any>;
    getAssetListLength(txParams?: SpecialTx): Promise<any>;
    getAssetById(_assetId: number, txParams?: SpecialTx): Promise<any>;
    isRole(_role: number, _caller: string, txParams?: SpecialTx): Promise<any>;
    getMarketLookupContract(_assetId: number, txParams?: SpecialTx): Promise<any>;
    setActive(_assetId: number, _active: boolean, txParams?: SpecialTx): Promise<any>;
    init(_dbAddress: string, param1: string, txParams?: SpecialTx): Promise<any>;
    getMatcher(_assetId: number, txParams?: SpecialTx): Promise<any>;
}
