"use strict";
// Copyright 2018 Energy Web Foundation
// This file is part of the Origin Application brought to you by the Energy Web Foundation,
// a global non-profit organization focused on accelerating blockchain technology across the energy sector,
// incorporated in Zug, Switzerland.
//
// The Origin Application is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY and without an implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.
//
// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AssetContractLookup_1 = require("../wrappedContracts/AssetContractLookup");
const ew_utils_deployment_1 = require("ew-utils-deployment");
const __1 = require("..");
function migrateAssetRegistryContracts(web3, userContractLookup, deployKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const privateKeyDeployment = deployKey.startsWith('0x') ?
                deployKey : '0x' + deployKey;
            const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
            const assetContractLookupAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetContractLookupJSON.bytecode, { privateKey: privateKeyDeployment })).contractAddress;
            const assetConsumingLogicAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetConsumingRegistryLogicJSON.bytecode +
                web3.eth.abi.encodeParameters(['address', 'address'], [userContractLookup, assetContractLookupAddress]).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetConsumingDBAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetConsumingDBJSON.bytecode + web3.eth.abi.encodeParameter('address', assetConsumingLogicAddress).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetProducingLogicAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetProducingRegistryLogicJSON.bytecode +
                web3.eth.abi.encodeParameters(['address', 'address'], [userContractLookup, assetContractLookupAddress]).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetProducingDBAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetProducingDBJSON.bytecode + web3.eth.abi.encodeParameter('address', assetProducingLogicAddress).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetContractLookup = new AssetContractLookup_1.AssetContractLookup(web3, assetContractLookupAddress);
            yield assetContractLookup.init(userContractLookup, assetProducingLogicAddress, assetConsumingLogicAddress, assetProducingDBAddress, assetConsumingDBAddress, { privateKey: privateKeyDeployment });
            const resultMapping = {};
            resultMapping.AssetContractLookup = assetContractLookupAddress;
            resultMapping.AssetConsumingRegistryLogic = assetConsumingLogicAddress;
            resultMapping.AssetConsumingDB = assetConsumingDBAddress;
            resultMapping.AssetProducingRegistryLogic = assetProducingLogicAddress;
            resultMapping.AssetProducingDB = assetProducingDBAddress;
            resolve(resultMapping);
        }));
    });
}
exports.migrateAssetRegistryContracts = migrateAssetRegistryContracts;
function migrateSonnenAssetRegistryContracts(web3, userContractLookup, deployKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const privateKeyDeployment = deployKey.startsWith('0x') ?
                deployKey : '0x' + deployKey;
            const accountDeployment = web3.eth.accounts.privateKeyToAccount(privateKeyDeployment).address;
            const assetContractLookupAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetContractLookupJSON.bytecode, { privateKey: privateKeyDeployment })).contractAddress;
            const assetConsumingLogicAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetConsumingRegistryLogicJSON.bytecode +
                web3.eth.abi.encodeParameters(['address', 'address'], [userContractLookup, assetContractLookupAddress]).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetConsumingDBAddress = (yield ew_utils_deployment_1.deploy(web3, __1.AssetConsumingDBJSON.bytecode + web3.eth.abi.encodeParameter('address', assetConsumingLogicAddress).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetProducingLogicAddress = (yield ew_utils_deployment_1.deploy(web3, __1.SonnenAssetProducingRegistryLogicJSON.bytecode +
                web3.eth.abi.encodeParameters(['address', 'address'], [userContractLookup, assetContractLookupAddress]).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetProducingDBAddress = (yield ew_utils_deployment_1.deploy(web3, __1.SonnenAssetProducingDBJSON.bytecode + web3.eth.abi.encodeParameter('address', assetProducingLogicAddress).substr(2), { privateKey: privateKeyDeployment })).contractAddress;
            const assetContractLookup = new AssetContractLookup_1.AssetContractLookup(web3, assetContractLookupAddress);
            yield assetContractLookup.init(userContractLookup, assetProducingLogicAddress, assetConsumingLogicAddress, assetProducingDBAddress, assetConsumingDBAddress, { privateKey: privateKeyDeployment });
            const resultMapping = {};
            resultMapping.AssetContractLookup = assetContractLookupAddress;
            resultMapping.AssetConsumingRegistryLogic = assetConsumingLogicAddress;
            resultMapping.AssetConsumingDB = assetConsumingDBAddress;
            resultMapping.AssetProducingRegistryLogic = assetProducingLogicAddress;
            resultMapping.AssetProducingDB = assetProducingDBAddress;
            resolve(resultMapping);
        }));
    });
}
exports.migrateSonnenAssetRegistryContracts = migrateSonnenAssetRegistryContracts;
//# sourceMappingURL=migrateContracts.js.map