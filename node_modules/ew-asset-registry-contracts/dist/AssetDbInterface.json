{"abi":[{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastSmartMeterReadWh","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getIsBundled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastMeterReadingAndHash","outputs":[{"name":"_lastSmartMeterReadWh","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_bundled","type":"bool"}],"name":"setIsBundled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_owner","type":"address"}],"name":"setAssetOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadWh","type":"uint256"}],"name":"setLastSmartMeterReadWh","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_matcher","type":"address"}],"name":"addMatcher","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_matcher","type":"address[]"}],"name":"setMatcherExternal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_removal","type":"address"}],"name":"removeMatcherExternal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"name":"setLastSmartMeterReadFileHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_marketLookupContract","type":"address"}],"name":"setMarketLookupContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_lastSmartMeterReadWh","type":"uint256"},{"name":"_lastSmartMeterReadFileHash","type":"string"}],"name":"setSmartMeterRead","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getAssetGeneral","outputs":[{"components":[{"name":"smartMeter","type":"address"},{"name":"owner","type":"address"},{"name":"lastSmartMeterReadWh","type":"uint256"},{"name":"active","type":"bool"},{"name":"lastSmartMeterReadFileHash","type":"string"},{"name":"matcher","type":"address[]"},{"name":"propertiesDocumentHash","type":"string"},{"name":"url","type":"string"},{"name":"marketLookupContract","type":"address"},{"name":"bundled","type":"bool"}],"name":"general","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAssetListLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMarketLookupContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_assetId","type":"uint256"},{"name":"_active","type":"bool"}],"name":"setActive","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getSmartMeter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getLastSmartMeterReadFileHash","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_assetId","type":"uint256"}],"name":"getMatcher","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"","contractName":"AssetDbInterface","deployedBytecode":"","source":"// Copyright 2018 Energy Web Foundation\n// This file is part of the Origin Application brought to you by the Energy Web Foundation,\n// a global non-profit organization focused on accelerating blockchain technology across the energy sector,\n// incorporated in Zug, Switzerland.\n//\n// The Origin Application is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY and without an implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details, at <http://www.gnu.org/licenses/>.\n//\n// @authors: slock.it GmbH; Martin Kuechler, martin.kuchler@slock.it; Heiko Burkhardt, heiko.burkhardt@slock.it\n\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../contracts/Asset/AssetGeneralStructContract.sol\";\n\n/// @title this interface defines the functions that both consuming and producing assets are sharing\ninterface AssetDbInterface {\n\n\t/// @notice gets the AssetGeneral struct of an asset\n\t/// @param _assetId the id of asset\n\t/// @return AssetGeneral struct\n    function getAssetGeneral(uint _assetId) external view returns (AssetGeneralStructContract.AssetGeneral memory general);\n\n\t/// @notice sets the active flag of an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _active active flag\n    function setActive(uint _assetId, bool _active) external;\n\n\t/// @notice gets the active flag of an asset\n\t/// @param _assetId the id of an asset\n\t/// @return active flag\n    function getActive(uint _assetId) external view returns (bool);\n\n\t/// @notice sets a new filehash of a meterreading\n\t/// @param _assetId the id of an asset\n\t/// @param _lastSmartMeterReadFileHash new filehash\n    function setLastSmartMeterReadFileHash(uint _assetId, string calldata _lastSmartMeterReadFileHash) external;\n\n\t/// @notice gets the latest filehash\n\t/// @param _assetId the id of an sset\n\t/// @return filehash\n    function getLastSmartMeterReadFileHash(uint _assetId) external view returns (string memory);\n\n\t/// @notice seta a new meterreading\n\t/// @param _assetId the id of an asset\n\t/// @param _lastSmartMeterReadWh the new meterreading\n    function setLastSmartMeterReadWh(uint _assetId, uint _lastSmartMeterReadWh) external;\n\n\t/// @notice gets the current meterreading\n\t/// @param _assetId the id of an asset\n\t/// @return current meterreading\n    function getLastSmartMeterReadWh(uint _assetId) external  view returns (uint);\n\n\t/// @notice sets the asset owner\n\t/// @param _assetId the id of an asset\n\t/// @param _owner the asset-owner\n    function setAssetOwner(uint _assetId, address _owner) external;\n\n\t/// @notice gets the asset owner\n\t/// @param _assetId the id of an asset\n\t/// @return the asset owner\n    function getAssetOwner(uint _assetId) external view returns (address);\n\n\t/// @notice gets the smart meter\n\t/// @param _assetId the id of an asset\n\t/// @return the smartmeter\n    function getSmartMeter(uint _assetId) external view returns (address);\n\n\t/// @notice gets the bundled flag\n\t/// @param _assetId the id of an asset\n\t/// @return the bundled flag\n    function getIsBundled(uint _assetId) external view returns (bool);\n\n\t/// @notice sets the bundled flag\n\t/// @param _assetId the id of an asset\n\t/// @param _bundled bundled flag\n    function setIsBundled(uint _assetId, bool _bundled) external;\n\n\t/// @notice set the marketLookup contract\n\t/// @param _assetId the id of an asset\n\t/// @param _marketLookupContract new marketLookup contract\n    function setMarketLookupContract(uint _assetId, address _marketLookupContract) external;\n\n\t/// @notice gets the marketLookup contract\n\t/// @param _assetId the id of an asset\n\t/// @return the marketcontract lookup\n    function getMarketLookupContract(uint _assetId) external view returns (address);\n\n\t/// @notice adds a matcher-address to an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _matcher matcher-address\n    function addMatcher(uint _assetId, address _matcher) external;\n\n\t/// @notice gets the matcher array of an asset\n\t/// @param _assetId the id of an asset\n\t/// @return matcher-array\n    function getMatcher(uint _assetId) external view returns (address[] memory);\n\n\t/// @notice sets the matcher array\n\t/// @param _assetId id of an asset\n\t/// @param _matcher matcher-array\n    function setMatcherExternal(uint _assetId, address[] calldata _matcher) external;\n\n\t/// @notice removes a matcher-address from the matcher-array of an asset\n\t/// @param _assetId the id of an asset\n\t/// @param _removal address to be removed\n\t/// @return whether the to be removed address was found in the array\n    function removeMatcherExternal(uint _assetId, address _removal) external returns (bool);\n\n\t/// @notice sets a new meterreading and its filehash\n\t/// @param _assetId the id of an asset\n\t/// @param _lastSmartMeterReadWh meterreading in Wh\n\t/// @param _lastSmartMeterReadFileHash filehash of the meterreading\n\tfunction setSmartMeterRead(uint _assetId, uint _lastSmartMeterReadWh, string calldata _lastSmartMeterReadFileHash) external;\n\t\n\t/// @notice gets the latest meterreading and its hash\n\t/// @param _assetId id of an asset\n\t/// @return meterreading and its hash\n    function getLastMeterReadingAndHash(uint _assetId) external view returns (uint _lastSmartMeterReadWh, string memory _lastSmartMeterReadFileHash);\n\n\t/// @notice get the amount of onboarded assets\n\t/// @return the amount of onboarded assets\n    function getAssetListLength() external view returns (uint);\n}","networks":"{}"}